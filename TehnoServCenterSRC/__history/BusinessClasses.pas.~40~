(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 12.01.2006 12:50:46         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

unit BusinessClasses;

{$DEFINE BusinessClasses_unitheader}
{$INCLUDE BusinessClasses_Interface.inc}

{ Includefile for methodimplementations }


const
  BoldMemberAssertInvalidObjectType: string = 'Object of singlelink (%s.%s) is of wrong type (is %s, should be %s)';

{ TBusinessClassesRoot }

procedure TBusinessClassesRootList.Add(NewObject: TBusinessClassesRoot);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TBusinessClassesRootList.IndexOf(anObject: TBusinessClassesRoot): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TBusinessClassesRootList.Includes(anObject: TBusinessClassesRoot) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TBusinessClassesRootList.AddNew: TBusinessClassesRoot;
begin
  result := TBusinessClassesRoot(InternalAddNew);
end;

procedure TBusinessClassesRootList.Insert(index: Integer; NewObject: TBusinessClassesRoot);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TBusinessClassesRootList.GetBoldObject(index: Integer): TBusinessClassesRoot;
begin
  result := TBusinessClassesRoot(GetElement(index));
end;

procedure TBusinessClassesRootList.SetBoldObject(index: Integer; NewObject: TBusinessClassesRoot);
begin;
  SetElement(index, NewObject);
end;

{ TPersona }

function TPersona._Get_M_Familiya: TBAString;
begin
  assert(ValidateMember('TPersona', 'Familiya', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TPersona._GetFamiliya: String;
begin
  Result := M_Familiya.AsString;
end;

procedure TPersona._SetFamiliya(const NewValue: String);
begin
  M_Familiya.AsString := NewValue;
end;

function TPersona._Get_M_Imya: TBAString;
begin
  assert(ValidateMember('TPersona', 'Imya', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TPersona._GetImya: String;
begin
  Result := M_Imya.AsString;
end;

procedure TPersona._SetImya(const NewValue: String);
begin
  M_Imya.AsString := NewValue;
end;

function TPersona._Get_M_Otchestvo: TBAString;
begin
  assert(ValidateMember('TPersona', 'Otchestvo', 2, TBAString));
  Result := TBAString(BoldMembers[2]);
end;

function TPersona._GetOtchestvo: String;
begin
  Result := M_Otchestvo.AsString;
end;

procedure TPersona._SetOtchestvo(const NewValue: String);
begin
  M_Otchestvo.AsString := NewValue;
end;

function TPersona._Get_M_Ulica: TBAString;
begin
  assert(ValidateMember('TPersona', 'Ulica', 3, TBAString));
  Result := TBAString(BoldMembers[3]);
end;

function TPersona._GetUlica: String;
begin
  Result := M_Ulica.AsString;
end;

procedure TPersona._SetUlica(const NewValue: String);
begin
  M_Ulica.AsString := NewValue;
end;

function TPersona._Get_M_Dom: TBAInteger;
begin
  assert(ValidateMember('TPersona', 'Dom', 4, TBAInteger));
  Result := TBAInteger(BoldMembers[4]);
end;

function TPersona._GetDom: Integer;
begin
  Result := M_Dom.AsInteger;
end;

procedure TPersona._SetDom(const NewValue: Integer);
begin
  M_Dom.AsInteger := NewValue;
end;

function TPersona._Get_M_Kvartira: TBAInteger;
begin
  assert(ValidateMember('TPersona', 'Kvartira', 5, TBAInteger));
  Result := TBAInteger(BoldMembers[5]);
end;

function TPersona._GetKvartira: Integer;
begin
  Result := M_Kvartira.AsInteger;
end;

procedure TPersona._SetKvartira(const NewValue: Integer);
begin
  M_Kvartira.AsInteger := NewValue;
end;

function TPersona._Get_M_Korpus: TBAInteger;
begin
  assert(ValidateMember('TPersona', 'Korpus', 6, TBAInteger));
  Result := TBAInteger(BoldMembers[6]);
end;

function TPersona._GetKorpus: Integer;
begin
  Result := M_Korpus.AsInteger;
end;

procedure TPersona._SetKorpus(const NewValue: Integer);
begin
  M_Korpus.AsInteger := NewValue;
end;

function TPersona._Get_M_Mobiljnyi_telefon: TBAString;
begin
  assert(ValidateMember('TPersona', 'Mobiljnyi_telefon', 7, TBAString));
  Result := TBAString(BoldMembers[7]);
end;

function TPersona._GetMobiljnyi_telefon: String;
begin
  Result := M_Mobiljnyi_telefon.AsString;
end;

procedure TPersona._SetMobiljnyi_telefon(const NewValue: String);
begin
  M_Mobiljnyi_telefon.AsString := NewValue;
end;

function TPersona._Get_M_Rabochii_telefon: TBAString;
begin
  assert(ValidateMember('TPersona', 'Rabochii_telefon', 8, TBAString));
  Result := TBAString(BoldMembers[8]);
end;

function TPersona._GetRabochii_telefon: String;
begin
  Result := M_Rabochii_telefon.AsString;
end;

procedure TPersona._SetRabochii_telefon(const NewValue: String);
begin
  M_Rabochii_telefon.AsString := NewValue;
end;

function TPersona._Get_M_Domashnii_telefon: TBAString;
begin
  assert(ValidateMember('TPersona', 'Domashnii_telefon', 9, TBAString));
  Result := TBAString(BoldMembers[9]);
end;

function TPersona._GetDomashnii_telefon: String;
begin
  Result := M_Domashnii_telefon.AsString;
end;

procedure TPersona._SetDomashnii_telefon(const NewValue: String);
begin
  M_Domashnii_telefon.AsString := NewValue;
end;

function TPersona._Get_M_Elektronnyi_adres: TBAString;
begin
  assert(ValidateMember('TPersona', 'Elektronnyi_adres', 10, TBAString));
  Result := TBAString(BoldMembers[10]);
end;

function TPersona._GetElektronnyi_adres: String;
begin
  Result := M_Elektronnyi_adres.AsString;
end;

procedure TPersona._SetElektronnyi_adres(const NewValue: String);
begin
  M_Elektronnyi_adres.AsString := NewValue;
end;

function TPersona._Get_M_Strana: TBAString;
begin
  assert(ValidateMember('TPersona', 'Strana', 11, TBAString));
  Result := TBAString(BoldMembers[11]);
end;

function TPersona._GetStrana: String;
begin
  Result := M_Strana.AsString;
end;

procedure TPersona._SetStrana(const NewValue: String);
begin
  M_Strana.AsString := NewValue;
end;

function TPersona._Get_M_Oblastj: TBAString;
begin
  assert(ValidateMember('TPersona', 'Oblastj', 12, TBAString));
  Result := TBAString(BoldMembers[12]);
end;

function TPersona._GetOblastj: String;
begin
  Result := M_Oblastj.AsString;
end;

procedure TPersona._SetOblastj(const NewValue: String);
begin
  M_Oblastj.AsString := NewValue;
end;

function TPersona._Get_M_Gorod: TBAString;
begin
  assert(ValidateMember('TPersona', 'Gorod', 13, TBAString));
  Result := TBAString(BoldMembers[13]);
end;

function TPersona._GetGorod: String;
begin
  Result := M_Gorod.AsString;
end;

procedure TPersona._SetGorod(const NewValue: String);
begin
  M_Gorod.AsString := NewValue;
end;

function TPersona._Get_M_PolnoeImya: TBAString;
begin
  assert(ValidateMember('TPersona', 'PolnoeImya', 14, TBAString));
  Result := TBAString(BoldMembers[14]);
end;

function TPersona._GetPolnoeImya: String;
begin
  Result := M_PolnoeImya.AsString;
end;

function TPersona._Get_M_BIK: TBAString;
begin
  assert(ValidateMember('TPersona', 'BIK', 15, TBAString));
  Result := TBAString(BoldMembers[15]);
end;

function TPersona._GetBIK: String;
begin
  Result := M_BIK.AsString;
end;

procedure TPersona._SetBIK(const NewValue: String);
begin
  M_BIK.AsString := NewValue;
end;

function TPersona._Get_M_Naimenovanie: TBAString;
begin
  assert(ValidateMember('TPersona', 'Naimenovanie', 16, TBAString));
  Result := TBAString(BoldMembers[16]);
end;

function TPersona._GetNaimenovanie: String;
begin
  Result := M_Naimenovanie.AsString;
end;

procedure TPersona._SetNaimenovanie(const NewValue: String);
begin
  M_Naimenovanie.AsString := NewValue;
end;

function TPersona._Get_M_YavlyaetsyaVlad: TBABoolean;
begin
  assert(ValidateMember('TPersona', 'YavlyaetsyaVlad', 17, TBABoolean));
  Result := TBABoolean(BoldMembers[17]);
end;

function TPersona._GetYavlyaetsyaVlad: Boolean;
begin
  Result := M_YavlyaetsyaVlad.AsBoolean;
end;

procedure TPersona._SetYavlyaetsyaVlad(const NewValue: Boolean);
begin
  M_YavlyaetsyaVlad.AsBoolean := NewValue;
end;

function TPersona._Get_M_Rukovoditelj: TBAString;
begin
  assert(ValidateMember('TPersona', 'Rukovoditelj', 18, TBAString));
  Result := TBAString(BoldMembers[18]);
end;

function TPersona._GetRukovoditelj: String;
begin
  Result := M_Rukovoditelj.AsString;
end;

procedure TPersona._SetRukovoditelj(const NewValue: String);
begin
  M_Rukovoditelj.AsString := NewValue;
end;

function TPersona._Get_M_GlBuhgalter: TBAString;
begin
  assert(ValidateMember('TPersona', 'GlBuhgalter', 19, TBAString));
  Result := TBAString(BoldMembers[19]);
end;

function TPersona._GetGlBuhgalter: String;
begin
  Result := M_GlBuhgalter.AsString;
end;

procedure TPersona._SetGlBuhgalter(const NewValue: String);
begin
  M_GlBuhgalter.AsString := NewValue;
end;

function TPersona._Get_M_INN: TBAString;
begin
  assert(ValidateMember('TPersona', 'INN', 20, TBAString));
  Result := TBAString(BoldMembers[20]);
end;

function TPersona._GetINN: String;
begin
  Result := M_INN.AsString;
end;

procedure TPersona._SetINN(const NewValue: String);
begin
  M_INN.AsString := NewValue;
end;

function TPersona._Get_M_Rasch__schet: TBAString;
begin
  assert(ValidateMember('TPersona', 'Rasch__schet', 21, TBAString));
  Result := TBAString(BoldMembers[21]);
end;

function TPersona._GetRasch__schet: String;
begin
  Result := M_Rasch__schet.AsString;
end;

procedure TPersona._SetRasch__schet(const NewValue: String);
begin
  M_Rasch__schet.AsString := NewValue;
end;

function TPersona._Get_M_KPP: TBAString;
begin
  assert(ValidateMember('TPersona', 'KPP', 22, TBAString));
  Result := TBAString(BoldMembers[22]);
end;

function TPersona._GetKPP: String;
begin
  Result := M_KPP.AsString;
end;

procedure TPersona._SetKPP(const NewValue: String);
begin
  M_KPP.AsString := NewValue;
end;

function TPersona._Get_M_Tip_organizacii: TBAString;
begin
  assert(ValidateMember('TPersona', 'Tip_organizacii', 23, TBAString));
  Result := TBAString(BoldMembers[23]);
end;

function TPersona._GetTip_organizacii: String;
begin
  Result := M_Tip_organizacii.AsString;
end;

procedure TPersona._SetTip_organizacii(const NewValue: String);
begin
  M_Tip_organizacii.AsString := NewValue;
end;

function TPersona._Get_M_Kor_schet: TBAString;
begin
  assert(ValidateMember('TPersona', 'Kor_schet', 24, TBAString));
  Result := TBAString(BoldMembers[24]);
end;

function TPersona._GetKor_schet: String;
begin
  Result := M_Kor_schet.AsString;
end;

procedure TPersona._SetKor_schet(const NewValue: String);
begin
  M_Kor_schet.AsString := NewValue;
end;

function TPersona._Get_M_Naim__banka: TBAString;
begin
  assert(ValidateMember('TPersona', 'Naim__banka', 25, TBAString));
  Result := TBAString(BoldMembers[25]);
end;

function TPersona._GetNaim__banka: String;
begin
  Result := M_Naim__banka.AsString;
end;

procedure TPersona._SetNaim__banka(const NewValue: String);
begin
  M_Naim__banka.AsString := NewValue;
end;

procedure TPersonaList.Add(NewObject: TPersona);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TPersonaList.IndexOf(anObject: TPersona): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TPersonaList.Includes(anObject: TPersona) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TPersonaList.AddNew: TPersona;
begin
  result := TPersona(InternalAddNew);
end;

procedure TPersonaList.Insert(index: Integer; NewObject: TPersona);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TPersonaList.GetBoldObject(index: Integer): TPersona;
begin
  result := TPersona(GetElement(index));
end;

procedure TPersonaList.SetBoldObject(index: Integer; NewObject: TPersona);
begin;
  SetElement(index, NewObject);
end;

{ TPriemka_vydacha }

function TPriemka_vydacha._Get_M_YavlBezNal: TBABoolean;
begin
  assert(ValidateMember('TPriemka_vydacha', 'YavlBezNal', 0, TBABoolean));
  Result := TBABoolean(BoldMembers[0]);
end;

function TPriemka_vydacha._GetYavlBezNal: Boolean;
begin
  Result := M_YavlBezNal.AsBoolean;
end;

procedure TPriemka_vydacha._SetYavlBezNal(const NewValue: Boolean);
begin
  M_YavlBezNal.AsBoolean := NewValue;
end;

function TPriemka_vydacha._Get_M_OtpushenSRemontaPolnostjyu: TBABoolean;
begin
  assert(ValidateMember('TPriemka_vydacha', 'OtpushenSRemontaPolnostjyu', 1, TBABoolean));
  Result := TBABoolean(BoldMembers[1]);
end;

function TPriemka_vydacha._GetOtpushenSRemontaPolnostjyu: Boolean;
begin
  Result := M_OtpushenSRemontaPolnostjyu.AsBoolean;
end;

function TPriemka_vydacha._Get_M_OplachenBezNal: TBABoolean;
begin
  assert(ValidateMember('TPriemka_vydacha', 'OplachenBezNal', 2, TBABoolean));
  Result := TBABoolean(BoldMembers[2]);
end;

function TPriemka_vydacha._GetOplachenBezNal: Boolean;
begin
  Result := M_OplachenBezNal.AsBoolean;
end;

procedure TPriemka_vydacha._SetOplachenBezNal(const NewValue: Boolean);
begin
  M_OplachenBezNal.AsBoolean := NewValue;
end;

function TPriemka_vydacha._Get_M_DataPriema: TBADate;
begin
  assert(ValidateMember('TPriemka_vydacha', 'DataPriema', 3, TBADate));
  Result := TBADate(BoldMembers[3]);
end;

function TPriemka_vydacha._GetDataPriema: TDate;
begin
  Result := M_DataPriema.AsDate;
end;

procedure TPriemka_vydacha._SetDataPriema(const NewValue: TDate);
begin
  M_DataPriema.AsDate := NewValue;
end;

function TPriemka_vydacha._Get_M_DataVydachi: TBADate;
begin
  assert(ValidateMember('TPriemka_vydacha', 'DataVydachi', 4, TBADate));
  Result := TBADate(BoldMembers[4]);
end;

function TPriemka_vydacha._GetDataVydachi: TDate;
begin
  Result := M_DataVydachi.AsDate;
end;

procedure TPriemka_vydacha._SetDataVydachi(const NewValue: TDate);
begin
  M_DataVydachi.AsDate := NewValue;
end;

function TPriemka_vydacha._Get_M_Kolichestvo_pozicii: TBAInteger;
begin
  assert(ValidateMember('TPriemka_vydacha', 'Kolichestvo_pozicii', 5, TBAInteger));
  Result := TBAInteger(BoldMembers[5]);
end;

function TPriemka_vydacha._GetKolichestvo_pozicii: Integer;
begin
  Result := M_Kolichestvo_pozicii.AsInteger;
end;

function TPriemka_vydacha._Get_M_KlientYavlYurLicom: TBABoolean;
begin
  assert(ValidateMember('TPriemka_vydacha', 'KlientYavlYurLicom', 6, TBABoolean));
  Result := TBABoolean(BoldMembers[6]);
end;

function TPriemka_vydacha._GetKlientYavlYurLicom: Boolean;
begin
  Result := M_KlientYavlYurLicom.AsBoolean;
end;

procedure TPriemka_vydacha._SetKlientYavlYurLicom(const NewValue: Boolean);
begin
  M_KlientYavlYurLicom.AsBoolean := NewValue;
end;

function TPriemka_vydacha._Get_M_Nomer_dokumenta: TBAInteger;
begin
  assert(ValidateMember('TPriemka_vydacha', 'Nomer_dokumenta', 7, TBAInteger));
  Result := TBAInteger(BoldMembers[7]);
end;

function TPriemka_vydacha._GetNomer_dokumenta: Integer;
begin
  Result := M_Nomer_dokumenta.AsInteger;
end;

procedure TPriemka_vydacha._SetNomer_dokumenta(const NewValue: Integer);
begin
  M_Nomer_dokumenta.AsInteger := NewValue;
end;

function TPriemka_vydacha._Get_M_DataVydachiStr: TBAString;
begin
  assert(ValidateMember('TPriemka_vydacha', 'DataVydachiStr', 8, TBAString));
  Result := TBAString(BoldMembers[8]);
end;

function TPriemka_vydacha._GetDataVydachiStr: String;
begin
  Result := M_DataVydachiStr.AsString;
end;

function TPriemka_vydacha._Get_M_OtpushenNoNePoln: TBABoolean;
begin
  assert(ValidateMember('TPriemka_vydacha', 'OtpushenNoNePoln', 9, TBABoolean));
  Result := TBABoolean(BoldMembers[9]);
end;

function TPriemka_vydacha._GetOtpushenNoNePoln: Boolean;
begin
  Result := M_OtpushenNoNePoln.AsBoolean;
end;

function TPriemka_vydacha._Get_M_Summa_zakaza: TBAFloat;
begin
  assert(ValidateMember('TPriemka_vydacha', 'Summa_zakaza', 10, TBAFloat));
  Result := TBAFloat(BoldMembers[10]);
end;

function TPriemka_vydacha._GetSumma_zakaza: double;
begin
  Result := M_Summa_zakaza.AsFloat;
end;

function TPriemka_vydacha._Get_M_ImyaKlienta: TBAString;
begin
  assert(ValidateMember('TPriemka_vydacha', 'ImyaKlienta', 11, TBAString));
  Result := TBAString(BoldMembers[11]);
end;

function TPriemka_vydacha._GetImyaKlienta: String;
begin
  Result := M_ImyaKlienta.AsString;
end;

function TPriemka_vydacha._Get_M_TelefonKlienta: TBAString;
begin
  assert(ValidateMember('TPriemka_vydacha', 'TelefonKlienta', 12, TBAString));
  Result := TBAString(BoldMembers[12]);
end;

function TPriemka_vydacha._GetTelefonKlienta: String;
begin
  Result := M_TelefonKlienta.AsString;
end;

function TPriemka_vydacha._Get_M_Plateljshik: TBAString;
begin
  assert(ValidateMember('TPriemka_vydacha', 'Plateljshik', 13, TBAString));
  Result := TBAString(BoldMembers[13]);
end;

function TPriemka_vydacha._GetPlateljshik: String;
begin
  Result := M_Plateljshik.AsString;
end;

function TPriemka_vydacha._Get_M_Nomer_schyota: TBAString;
begin
  assert(ValidateMember('TPriemka_vydacha', 'Nomer_schyota', 14, TBAString));
  Result := TBAString(BoldMembers[14]);
end;

function TPriemka_vydacha._GetNomer_schyota: String;
begin
  Result := M_Nomer_schyota.AsString;
end;

procedure TPriemka_vydacha._SetNomer_schyota(const NewValue: String);
begin
  M_Nomer_schyota.AsString := NewValue;
end;

function TPriemka_vydacha._Get_M_Vypis_schyot: TBABoolean;
begin
  assert(ValidateMember('TPriemka_vydacha', 'Vypis_schyot', 15, TBABoolean));
  Result := TBABoolean(BoldMembers[15]);
end;

function TPriemka_vydacha._GetVypis_schyot: Boolean;
begin
  Result := M_Vypis_schyot.AsBoolean;
end;

procedure TPriemka_vydacha._SetVypis_schyot(const NewValue: Boolean);
begin
  M_Vypis_schyot.AsBoolean := NewValue;
end;

function TPriemka_vydacha._Get_M_DataVypiskiSchyota: TBADate;
begin
  assert(ValidateMember('TPriemka_vydacha', 'DataVypiskiSchyota', 16, TBADate));
  Result := TBADate(BoldMembers[16]);
end;

function TPriemka_vydacha._GetDataVypiskiSchyota: TDate;
begin
  Result := M_DataVypiskiSchyota.AsDate;
end;

procedure TPriemka_vydacha._SetDataVypiskiSchyota(const NewValue: TDate);
begin
  M_DataVypiskiSchyota.AsDate := NewValue;
end;

function TPriemka_vydacha._GetOtdeljnaya_usluga_v: TSostav_priemki_vydachiList;
begin
  assert(ValidateMember('TPriemka_vydacha', 'Otdeljnaya_usluga_v', 17, TSostav_priemki_vydachiList));
  Result := TSostav_priemki_vydachiList(BoldMembers[17]);
end;

function TPriemka_vydacha._Get_M_usluga_dlya_fiz_lica: TBoldObjectReference;
begin
  assert(ValidateMember('TPriemka_vydacha', 'usluga_dlya_fiz_lica', 18, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[18]);
end;

function TPriemka_vydacha._Getusluga_dlya_fiz_lica: TChastnoe_lico;
begin
  assert(not assigned(M_usluga_dlya_fiz_lica.BoldObject) or (M_usluga_dlya_fiz_lica.BoldObject is TChastnoe_lico), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'usluga_dlya_fiz_lica', M_usluga_dlya_fiz_lica.BoldObject.ClassName, 'TChastnoe_lico']));
  Result := TChastnoe_lico(M_usluga_dlya_fiz_lica.BoldObject);
end;

procedure TPriemka_vydacha._Setusluga_dlya_fiz_lica(const value: TChastnoe_lico);
begin
  M_usluga_dlya_fiz_lica.BoldObject := value;
end;

function TPriemka_vydacha._Get_M_usluga_dlya_yur_lica: TBoldObjectReference;
begin
  assert(ValidateMember('TPriemka_vydacha', 'usluga_dlya_yur_lica', 19, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[19]);
end;

function TPriemka_vydacha._Getusluga_dlya_yur_lica: TYuridich_lico;
begin
  assert(not assigned(M_usluga_dlya_yur_lica.BoldObject) or (M_usluga_dlya_yur_lica.BoldObject is TYuridich_lico), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'usluga_dlya_yur_lica', M_usluga_dlya_yur_lica.BoldObject.ClassName, 'TYuridich_lico']));
  Result := TYuridich_lico(M_usluga_dlya_yur_lica.BoldObject);
end;

procedure TPriemka_vydacha._Setusluga_dlya_yur_lica(const value: TYuridich_lico);
begin
  M_usluga_dlya_yur_lica.BoldObject := value;
end;

function TPriemka_vydacha._Get_M_zaimaetsya_uslugoi: TBoldObjectReference;
begin
  assert(ValidateMember('TPriemka_vydacha', 'zaimaetsya_uslugoi', 20, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[20]);
end;

function TPriemka_vydacha._Getzaimaetsya_uslugoi: TSotrudnik_remont;
begin
  assert(not assigned(M_zaimaetsya_uslugoi.BoldObject) or (M_zaimaetsya_uslugoi.BoldObject is TSotrudnik_remont), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'zaimaetsya_uslugoi', M_zaimaetsya_uslugoi.BoldObject.ClassName, 'TSotrudnik_remont']));
  Result := TSotrudnik_remont(M_zaimaetsya_uslugoi.BoldObject);
end;

procedure TPriemka_vydacha._Setzaimaetsya_uslugoi(const value: TSotrudnik_remont);
begin
  M_zaimaetsya_uslugoi.BoldObject := value;
end;

function TPriemka_vydacha._Get_M_oplachivaet: TBoldObjectReference;
begin
  assert(ValidateMember('TPriemka_vydacha', 'oplachivaet', 21, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[21]);
end;

function TPriemka_vydacha._Getoplachivaet: TYuridich_lico;
begin
  assert(not assigned(M_oplachivaet.BoldObject) or (M_oplachivaet.BoldObject is TYuridich_lico), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'oplachivaet', M_oplachivaet.BoldObject.ClassName, 'TYuridich_lico']));
  Result := TYuridich_lico(M_oplachivaet.BoldObject);
end;

procedure TPriemka_vydacha._Setoplachivaet(const value: TYuridich_lico);
begin
  M_oplachivaet.BoldObject := value;
end;

procedure TPriemka_vydachaList.Add(NewObject: TPriemka_vydacha);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TPriemka_vydachaList.IndexOf(anObject: TPriemka_vydacha): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TPriemka_vydachaList.Includes(anObject: TPriemka_vydacha) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TPriemka_vydachaList.AddNew: TPriemka_vydacha;
begin
  result := TPriemka_vydacha(InternalAddNew);
end;

procedure TPriemka_vydachaList.Insert(index: Integer; NewObject: TPriemka_vydacha);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TPriemka_vydachaList.GetBoldObject(index: Integer): TPriemka_vydacha;
begin
  result := TPriemka_vydacha(GetElement(index));
end;

procedure TPriemka_vydachaList.SetBoldObject(index: Integer; NewObject: TPriemka_vydacha);
begin;
  SetElement(index, NewObject);
end;

{ TRashod_po_operacii }

function TRashod_po_operacii._Get_M_Kolichestvo: TBAFloat;
begin
  assert(ValidateMember('TRashod_po_operacii', 'Kolichestvo', 0, TBAFloat));
  Result := TBAFloat(BoldMembers[0]);
end;

function TRashod_po_operacii._GetKolichestvo: double;
begin
  Result := M_Kolichestvo.AsFloat;
end;

procedure TRashod_po_operacii._SetKolichestvo(const NewValue: double);
begin
  M_Kolichestvo.AsFloat := NewValue;
end;

function TRashod_po_operacii._Get_M_Stoimostj: TBAFloat;
begin
  assert(ValidateMember('TRashod_po_operacii', 'Stoimostj', 1, TBAFloat));
  Result := TBAFloat(BoldMembers[1]);
end;

function TRashod_po_operacii._GetStoimostj: double;
begin
  Result := M_Stoimostj.AsFloat;
end;

procedure TRashod_po_operacii._SetStoimostj(const NewValue: double);
begin
  M_Stoimostj.AsFloat := NewValue;
end;

function TRashod_po_operacii._Get_M_Summa: TBAFloat;
begin
  assert(ValidateMember('TRashod_po_operacii', 'Summa', 2, TBAFloat));
  Result := TBAFloat(BoldMembers[2]);
end;

function TRashod_po_operacii._GetSumma: double;
begin
  Result := M_Summa.AsFloat;
end;

function TRashod_po_operacii._Get_M_Tip_tovara: TBAString;
begin
  assert(ValidateMember('TRashod_po_operacii', 'Tip_tovara', 3, TBAString));
  Result := TBAString(BoldMembers[3]);
end;

function TRashod_po_operacii._GetTip_tovara: String;
begin
  Result := M_Tip_tovara.AsString;
end;

function TRashod_po_operacii._Get_M_yavlyaetsya_po_tipu: TBoldObjectReference;
begin
  assert(ValidateMember('TRashod_po_operacii', 'yavlyaetsya_po_tipu', 4, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[4]);
end;

function TRashod_po_operacii._Getyavlyaetsya_po_tipu: TTip_tovara;
begin
  assert(not assigned(M_yavlyaetsya_po_tipu.BoldObject) or (M_yavlyaetsya_po_tipu.BoldObject is TTip_tovara), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'yavlyaetsya_po_tipu', M_yavlyaetsya_po_tipu.BoldObject.ClassName, 'TTip_tovara']));
  Result := TTip_tovara(M_yavlyaetsya_po_tipu.BoldObject);
end;

procedure TRashod_po_operacii._Setyavlyaetsya_po_tipu(const value: TTip_tovara);
begin
  M_yavlyaetsya_po_tipu.BoldObject := value;
end;

function TRashod_po_operacii._Get_M_vhodit_kak_poz_rashoda: TBoldObjectReference;
begin
  assert(ValidateMember('TRashod_po_operacii', 'vhodit_kak_poz_rashoda', 5, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[5]);
end;

function TRashod_po_operacii._Getvhodit_kak_poz_rashoda: TRashod_rem_materialov;
begin
  assert(not assigned(M_vhodit_kak_poz_rashoda.BoldObject) or (M_vhodit_kak_poz_rashoda.BoldObject is TRashod_rem_materialov), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'vhodit_kak_poz_rashoda', M_vhodit_kak_poz_rashoda.BoldObject.ClassName, 'TRashod_rem_materialov']));
  Result := TRashod_rem_materialov(M_vhodit_kak_poz_rashoda.BoldObject);
end;

procedure TRashod_po_operacii._Setvhodit_kak_poz_rashoda(const value: TRashod_rem_materialov);
begin
  M_vhodit_kak_poz_rashoda.BoldObject := value;
end;

procedure TRashod_po_operaciiList.Add(NewObject: TRashod_po_operacii);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TRashod_po_operaciiList.IndexOf(anObject: TRashod_po_operacii): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TRashod_po_operaciiList.Includes(anObject: TRashod_po_operacii) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TRashod_po_operaciiList.AddNew: TRashod_po_operacii;
begin
  result := TRashod_po_operacii(InternalAddNew);
end;

procedure TRashod_po_operaciiList.Insert(index: Integer; NewObject: TRashod_po_operacii);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TRashod_po_operaciiList.GetBoldObject(index: Integer): TRashod_po_operacii;
begin
  result := TRashod_po_operacii(GetElement(index));
end;

procedure TRashod_po_operaciiList.SetBoldObject(index: Integer; NewObject: TRashod_po_operacii);
begin;
  SetElement(index, NewObject);
end;

{ TRashod_rem_materialov }

function TRashod_rem_materialov._Get_M_Operaciya: TBAString;
begin
  assert(ValidateMember('TRashod_rem_materialov', 'Operaciya', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TRashod_rem_materialov._GetOperaciya: String;
begin
  Result := M_Operaciya.AsString;
end;

function TRashod_rem_materialov._Get_M_Stoimostj_vsei_raboty_: TBAFloat;
begin
  assert(ValidateMember('TRashod_rem_materialov', 'Stoimostj_vsei_raboty_', 1, TBAFloat));
  Result := TBAFloat(BoldMembers[1]);
end;

function TRashod_rem_materialov._GetStoimostj_vsei_raboty_: double;
begin
  Result := M_Stoimostj_vsei_raboty_.AsFloat;
end;

function TRashod_rem_materialov._Get_M_Stroka_opisaniya: TBAString;
begin
  assert(ValidateMember('TRashod_rem_materialov', 'Stroka_opisaniya', 2, TBAString));
  Result := TBAString(BoldMembers[2]);
end;

function TRashod_rem_materialov._GetStroka_opisaniya: String;
begin
  Result := M_Stroka_opisaniya.AsString;
end;

function TRashod_rem_materialov._Get_M_Stoimostj_materialov: TBAFloat;
begin
  assert(ValidateMember('TRashod_rem_materialov', 'Stoimostj_materialov', 3, TBAFloat));
  Result := TBAFloat(BoldMembers[3]);
end;

function TRashod_rem_materialov._GetStoimostj_materialov: double;
begin
  Result := M_Stoimostj_materialov.AsFloat;
end;

function TRashod_rem_materialov._Get_M_Stoimostj_operacii: TBAFloat;
begin
  assert(ValidateMember('TRashod_rem_materialov', 'Stoimostj_operacii', 4, TBAFloat));
  Result := TBAFloat(BoldMembers[4]);
end;

function TRashod_rem_materialov._GetStoimostj_operacii: double;
begin
  Result := M_Stoimostj_operacii.AsFloat;
end;

procedure TRashod_rem_materialov._SetStoimostj_operacii(const NewValue: double);
begin
  M_Stoimostj_operacii.AsFloat := NewValue;
end;

function TRashod_rem_materialov._Get_M_Rashoduetsya_dlya_remonta: TBoldObjectReference;
begin
  assert(ValidateMember('TRashod_rem_materialov', 'Rashoduetsya_dlya_remonta', 5, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[5]);
end;

function TRashod_rem_materialov._GetRashoduetsya_dlya_remonta: TSostav_priemki_vydachi;
begin
  assert(not assigned(M_Rashoduetsya_dlya_remonta.BoldObject) or (M_Rashoduetsya_dlya_remonta.BoldObject is TSostav_priemki_vydachi), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Rashoduetsya_dlya_remonta', M_Rashoduetsya_dlya_remonta.BoldObject.ClassName, 'TSostav_priemki_vydachi']));
  Result := TSostav_priemki_vydachi(M_Rashoduetsya_dlya_remonta.BoldObject);
end;

procedure TRashod_rem_materialov._SetRashoduetsya_dlya_remonta(const value: TSostav_priemki_vydachi);
begin
  M_Rashoduetsya_dlya_remonta.BoldObject := value;
end;

function TRashod_rem_materialov._Get_M_ispoljzuet_deistvie: TBoldObjectReference;
begin
  assert(ValidateMember('TRashod_rem_materialov', 'ispoljzuet_deistvie', 6, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[6]);
end;

function TRashod_rem_materialov._Getispoljzuet_deistvie: TOperaciya;
begin
  assert(not assigned(M_ispoljzuet_deistvie.BoldObject) or (M_ispoljzuet_deistvie.BoldObject is TOperaciya), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'ispoljzuet_deistvie', M_ispoljzuet_deistvie.BoldObject.ClassName, 'TOperaciya']));
  Result := TOperaciya(M_ispoljzuet_deistvie.BoldObject);
end;

procedure TRashod_rem_materialov._Setispoljzuet_deistvie(const value: TOperaciya);
begin
  M_ispoljzuet_deistvie.BoldObject := value;
end;

function TRashod_rem_materialov._Getvklyuch_pozicii_rashoda: TRashod_po_operaciiList;
begin
  assert(ValidateMember('TRashod_rem_materialov', 'vklyuch_pozicii_rashoda', 7, TRashod_po_operaciiList));
  Result := TRashod_po_operaciiList(BoldMembers[7]);
end;

procedure TRashod_rem_materialovList.Add(NewObject: TRashod_rem_materialov);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TRashod_rem_materialovList.IndexOf(anObject: TRashod_rem_materialov): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TRashod_rem_materialovList.Includes(anObject: TRashod_rem_materialov) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TRashod_rem_materialovList.AddNew: TRashod_rem_materialov;
begin
  result := TRashod_rem_materialov(InternalAddNew);
end;

procedure TRashod_rem_materialovList.Insert(index: Integer; NewObject: TRashod_rem_materialov);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TRashod_rem_materialovList.GetBoldObject(index: Integer): TRashod_rem_materialov;
begin
  result := TRashod_rem_materialov(GetElement(index));
end;

procedure TRashod_rem_materialovList.SetBoldObject(index: Integer; NewObject: TRashod_rem_materialov);
begin;
  SetElement(index, NewObject);
end;

{ TSostav_priemki_vydachi }

function TSostav_priemki_vydachi._Get_M_Opisanie_neispravnosti: TBAString;
begin
  assert(ValidateMember('TSostav_priemki_vydachi', 'Opisanie_neispravnosti', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TSostav_priemki_vydachi._GetOpisanie_neispravnosti: String;
begin
  Result := M_Opisanie_neispravnosti.AsString;
end;

procedure TSostav_priemki_vydachi._SetOpisanie_neispravnosti(const NewValue: String);
begin
  M_Opisanie_neispravnosti.AsString := NewValue;
end;

function TSostav_priemki_vydachi._Get_M_Izdelie: TBAString;
begin
  assert(ValidateMember('TSostav_priemki_vydachi', 'Izdelie', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TSostav_priemki_vydachi._GetIzdelie: String;
begin
  Result := M_Izdelie.AsString;
end;

function TSostav_priemki_vydachi._Get_M_Seriinyi_nomer: TBAString;
begin
  assert(ValidateMember('TSostav_priemki_vydachi', 'Seriinyi_nomer', 2, TBAString));
  Result := TBAString(BoldMembers[2]);
end;

function TSostav_priemki_vydachi._GetSeriinyi_nomer: String;
begin
  Result := M_Seriinyi_nomer.AsString;
end;

procedure TSostav_priemki_vydachi._SetSeriinyi_nomer(const NewValue: String);
begin
  M_Seriinyi_nomer.AsString := NewValue;
end;

function TSostav_priemki_vydachi._Get_M_Komplektnostj: TBAString;
begin
  assert(ValidateMember('TSostav_priemki_vydachi', 'Komplektnostj', 3, TBAString));
  Result := TBAString(BoldMembers[3]);
end;

function TSostav_priemki_vydachi._GetKomplektnostj: String;
begin
  Result := M_Komplektnostj.AsString;
end;

procedure TSostav_priemki_vydachi._SetKomplektnostj(const NewValue: String);
begin
  M_Komplektnostj.AsString := NewValue;
end;

function TSostav_priemki_vydachi._Get_M_Vydan: TBABoolean;
begin
  assert(ValidateMember('TSostav_priemki_vydachi', 'Vydan', 4, TBABoolean));
  Result := TBABoolean(BoldMembers[4]);
end;

function TSostav_priemki_vydachi._GetVydan: Boolean;
begin
  Result := M_Vydan.AsBoolean;
end;

procedure TSostav_priemki_vydachi._SetVydan(const NewValue: Boolean);
begin
  M_Vydan.AsBoolean := NewValue;
end;

function TSostav_priemki_vydachi._Get_M_VydanChisl: TBAInteger;
begin
  assert(ValidateMember('TSostav_priemki_vydachi', 'VydanChisl', 5, TBAInteger));
  Result := TBAInteger(BoldMembers[5]);
end;

function TSostav_priemki_vydachi._GetVydanChisl: Integer;
begin
  Result := M_VydanChisl.AsInteger;
end;

function TSostav_priemki_vydachi._Get_M_Nomer_akta_priyoma: TBAInteger;
begin
  assert(ValidateMember('TSostav_priemki_vydachi', 'Nomer_akta_priyoma', 6, TBAInteger));
  Result := TBAInteger(BoldMembers[6]);
end;

function TSostav_priemki_vydachi._GetNomer_akta_priyoma: Integer;
begin
  Result := M_Nomer_akta_priyoma.AsInteger;
end;

procedure TSostav_priemki_vydachi._SetNomer_akta_priyoma(const NewValue: Integer);
begin
  M_Nomer_akta_priyoma.AsInteger := NewValue;
end;

function TSostav_priemki_vydachi._Get_M_Nomer_akta_vydachi: TBAInteger;
begin
  assert(ValidateMember('TSostav_priemki_vydachi', 'Nomer_akta_vydachi', 7, TBAInteger));
  Result := TBAInteger(BoldMembers[7]);
end;

function TSostav_priemki_vydachi._GetNomer_akta_vydachi: Integer;
begin
  Result := M_Nomer_akta_vydachi.AsInteger;
end;

procedure TSostav_priemki_vydachi._SetNomer_akta_vydachi(const NewValue: Integer);
begin
  M_Nomer_akta_vydachi.AsInteger := NewValue;
end;

function TSostav_priemki_vydachi._Get_M_Vid_rabot: TBAString;
begin
  assert(ValidateMember('TSostav_priemki_vydachi', 'Vid_rabot', 8, TBAString));
  Result := TBAString(BoldMembers[8]);
end;

function TSostav_priemki_vydachi._GetVid_rabot: String;
begin
  Result := M_Vid_rabot.AsString;
end;

function TSostav_priemki_vydachi._Get_M_Summa_rashodov_mater: TBAFloat;
begin
  assert(ValidateMember('TSostav_priemki_vydachi', 'Summa_rashodov_mater', 9, TBAFloat));
  Result := TBAFloat(BoldMembers[9]);
end;

function TSostav_priemki_vydachi._GetSumma_rashodov_mater: double;
begin
  Result := M_Summa_rashodov_mater.AsFloat;
end;

function TSostav_priemki_vydachi._Get_M_Stoim_rabot: TBAFloat;
begin
  assert(ValidateMember('TSostav_priemki_vydachi', 'Stoim_rabot', 10, TBAFloat));
  Result := TBAFloat(BoldMembers[10]);
end;

function TSostav_priemki_vydachi._GetStoim_rabot: double;
begin
  Result := M_Stoim_rabot.AsFloat;
end;

function TSostav_priemki_vydachi._Get_M_Raznica_raboty: TBAFloat;
begin
  assert(ValidateMember('TSostav_priemki_vydachi', 'Raznica_raboty', 11, TBAFloat));
  Result := TBAFloat(BoldMembers[11]);
end;

function TSostav_priemki_vydachi._GetRaznica_raboty: double;
begin
  Result := M_Raznica_raboty.AsFloat;
end;

function TSostav_priemki_vydachi._Get_M_DataVydachi: TBADate;
begin
  assert(ValidateMember('TSostav_priemki_vydachi', 'DataVydachi', 12, TBADate));
  Result := TBADate(BoldMembers[12]);
end;

function TSostav_priemki_vydachi._GetDataVydachi: TDate;
begin
  Result := M_DataVydachi.AsDate;
end;

procedure TSostav_priemki_vydachi._SetDataVydachi(const NewValue: TDate);
begin
  M_DataVydachi.AsDate := NewValue;
end;

function TSostav_priemki_vydachi._Get_M_OrientirStoim: TBAFloat;
begin
  assert(ValidateMember('TSostav_priemki_vydachi', 'OrientirStoim', 13, TBAFloat));
  Result := TBAFloat(BoldMembers[13]);
end;

function TSostav_priemki_vydachi._GetOrientirStoim: double;
begin
  Result := M_OrientirStoim.AsFloat;
end;

procedure TSostav_priemki_vydachi._SetOrientirStoim(const NewValue: double);
begin
  M_OrientirStoim.AsFloat := NewValue;
end;

function TSostav_priemki_vydachi._Get_M_MenedgerImya: TBAString;
begin
  assert(ValidateMember('TSostav_priemki_vydachi', 'MenedgerImya', 14, TBAString));
  Result := TBAString(BoldMembers[14]);
end;

function TSostav_priemki_vydachi._GetMenedgerImya: String;
begin
  Result := M_MenedgerImya.AsString;
end;

function TSostav_priemki_vydachi._Get_M_NaimenOperac: TBAString;
begin
  assert(ValidateMember('TSostav_priemki_vydachi', 'NaimenOperac', 15, TBAString));
  Result := TBAString(BoldMembers[15]);
end;

function TSostav_priemki_vydachi._GetNaimenOperac: String;
begin
  Result := M_NaimenOperac.AsString;
end;

function TSostav_priemki_vydachi._Get_M_ImyaTehnSpecialista: TBAString;
begin
  assert(ValidateMember('TSostav_priemki_vydachi', 'ImyaTehnSpecialista', 16, TBAString));
  Result := TBAString(BoldMembers[16]);
end;

function TSostav_priemki_vydachi._GetImyaTehnSpecialista: String;
begin
  Result := M_ImyaTehnSpecialista.AsString;
end;

function TSostav_priemki_vydachi._Get_M_Stoim_operacii: TBAFloat;
begin
  assert(ValidateMember('TSostav_priemki_vydachi', 'Stoim_operacii', 17, TBAFloat));
  Result := TBAFloat(BoldMembers[17]);
end;

function TSostav_priemki_vydachi._GetStoim_operacii: double;
begin
  Result := M_Stoim_operacii.AsFloat;
end;

function TSostav_priemki_vydachi._Get_M_Pozicii_uslug_dlya: TBoldObjectReference;
begin
  assert(ValidateMember('TSostav_priemki_vydachi', 'Pozicii_uslug_dlya', 18, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[18]);
end;

function TSostav_priemki_vydachi._GetPozicii_uslug_dlya: TPriemka_vydacha;
begin
  assert(not assigned(M_Pozicii_uslug_dlya.BoldObject) or (M_Pozicii_uslug_dlya.BoldObject is TPriemka_vydacha), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Pozicii_uslug_dlya', M_Pozicii_uslug_dlya.BoldObject.ClassName, 'TPriemka_vydacha']));
  Result := TPriemka_vydacha(M_Pozicii_uslug_dlya.BoldObject);
end;

procedure TSostav_priemki_vydachi._SetPozicii_uslug_dlya(const value: TPriemka_vydacha);
begin
  M_Pozicii_uslug_dlya.BoldObject := value;
end;

function TSostav_priemki_vydachi._GetRemont_predpolagaet: TRashod_rem_materialovList;
begin
  assert(ValidateMember('TSostav_priemki_vydachi', 'Remont_predpolagaet', 19, TRashod_rem_materialovList));
  Result := TRashod_rem_materialovList(BoldMembers[19]);
end;

function TSostav_priemki_vydachi._Get_M_otnositsya_po_tipu: TBoldObjectReference;
begin
  assert(ValidateMember('TSostav_priemki_vydachi', 'otnositsya_po_tipu', 20, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[20]);
end;

function TSostav_priemki_vydachi._Getotnositsya_po_tipu: TTip_remontiruemogo_izdeliya;
begin
  assert(not assigned(M_otnositsya_po_tipu.BoldObject) or (M_otnositsya_po_tipu.BoldObject is TTip_remontiruemogo_izdeliya), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'otnositsya_po_tipu', M_otnositsya_po_tipu.BoldObject.ClassName, 'TTip_remontiruemogo_izdeliya']));
  Result := TTip_remontiruemogo_izdeliya(M_otnositsya_po_tipu.BoldObject);
end;

procedure TSostav_priemki_vydachi._Setotnositsya_po_tipu(const value: TTip_remontiruemogo_izdeliya);
begin
  M_otnositsya_po_tipu.BoldObject := value;
end;

function TSostav_priemki_vydachi._Get_M_remontom_zanimaetsya: TBoldObjectReference;
begin
  assert(ValidateMember('TSostav_priemki_vydachi', 'remontom_zanimaetsya', 21, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[21]);
end;

function TSostav_priemki_vydachi._Getremontom_zanimaetsya: TSotrudnik_remont;
begin
  assert(not assigned(M_remontom_zanimaetsya.BoldObject) or (M_remontom_zanimaetsya.BoldObject is TSotrudnik_remont), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'remontom_zanimaetsya', M_remontom_zanimaetsya.BoldObject.ClassName, 'TSotrudnik_remont']));
  Result := TSotrudnik_remont(M_remontom_zanimaetsya.BoldObject);
end;

procedure TSostav_priemki_vydachi._Setremontom_zanimaetsya(const value: TSotrudnik_remont);
begin
  M_remontom_zanimaetsya.BoldObject := value;
end;

function TSostav_priemki_vydachi._Get_M_vypolnyaetsya_dlya_operacii: TBoldObjectReference;
begin
  assert(ValidateMember('TSostav_priemki_vydachi', 'vypolnyaetsya_dlya_operacii', 22, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[22]);
end;

function TSostav_priemki_vydachi._Getvypolnyaetsya_dlya_operacii: TTip_operacii;
begin
  assert(not assigned(M_vypolnyaetsya_dlya_operacii.BoldObject) or (M_vypolnyaetsya_dlya_operacii.BoldObject is TTip_operacii), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'vypolnyaetsya_dlya_operacii', M_vypolnyaetsya_dlya_operacii.BoldObject.ClassName, 'TTip_operacii']));
  Result := TTip_operacii(M_vypolnyaetsya_dlya_operacii.BoldObject);
end;

procedure TSostav_priemki_vydachi._Setvypolnyaetsya_dlya_operacii(const value: TTip_operacii);
begin
  M_vypolnyaetsya_dlya_operacii.BoldObject := value;
end;

procedure TSostav_priemki_vydachiList.Add(NewObject: TSostav_priemki_vydachi);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TSostav_priemki_vydachiList.IndexOf(anObject: TSostav_priemki_vydachi): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TSostav_priemki_vydachiList.Includes(anObject: TSostav_priemki_vydachi) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TSostav_priemki_vydachiList.AddNew: TSostav_priemki_vydachi;
begin
  result := TSostav_priemki_vydachi(InternalAddNew);
end;

procedure TSostav_priemki_vydachiList.Insert(index: Integer; NewObject: TSostav_priemki_vydachi);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TSostav_priemki_vydachiList.GetBoldObject(index: Integer): TSostav_priemki_vydachi;
begin
  result := TSostav_priemki_vydachi(GetElement(index));
end;

procedure TSostav_priemki_vydachiList.SetBoldObject(index: Integer; NewObject: TSostav_priemki_vydachi);
begin;
  SetElement(index, NewObject);
end;

{ TSpravochnik }

function TSpravochnik._Get_M_Naimenovanie: TBAString;
begin
  assert(ValidateMember('TSpravochnik', 'Naimenovanie', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TSpravochnik._GetNaimenovanie: String;
begin
  Result := M_Naimenovanie.AsString;
end;

procedure TSpravochnik._SetNaimenovanie(const NewValue: String);
begin
  M_Naimenovanie.AsString := NewValue;
end;

function TSpravochnik._Get_M_Identifikator: TBAInteger;
begin
  assert(ValidateMember('TSpravochnik', 'Identifikator', 1, TBAInteger));
  Result := TBAInteger(BoldMembers[1]);
end;

function TSpravochnik._GetIdentifikator: Integer;
begin
  Result := M_Identifikator.AsInteger;
end;

procedure TSpravochnik._SetIdentifikator(const NewValue: Integer);
begin
  M_Identifikator.AsInteger := NewValue;
end;

function TSpravochnik._Get_M_Kommentarii: TBAString;
begin
  assert(ValidateMember('TSpravochnik', 'Kommentarii', 2, TBAString));
  Result := TBAString(BoldMembers[2]);
end;

function TSpravochnik._GetKommentarii: String;
begin
  Result := M_Kommentarii.AsString;
end;

procedure TSpravochnik._SetKommentarii(const NewValue: String);
begin
  M_Kommentarii.AsString := NewValue;
end;

procedure TSpravochnikList.Add(NewObject: TSpravochnik);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TSpravochnikList.IndexOf(anObject: TSpravochnik): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TSpravochnikList.Includes(anObject: TSpravochnik) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TSpravochnikList.AddNew: TSpravochnik;
begin
  result := TSpravochnik(InternalAddNew);
end;

procedure TSpravochnikList.Insert(index: Integer; NewObject: TSpravochnik);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TSpravochnikList.GetBoldObject(index: Integer): TSpravochnik;
begin
  result := TSpravochnik(GetElement(index));
end;

procedure TSpravochnikList.SetBoldObject(index: Integer; NewObject: TSpravochnik);
begin;
  SetElement(index, NewObject);
end;

{ TTekushie_znacheniya }

function TTekushie_znacheniya._Get_M_Tek_akt_priyoma: TBAInteger;
begin
  assert(ValidateMember('TTekushie_znacheniya', 'Tek_akt_priyoma', 0, TBAInteger));
  Result := TBAInteger(BoldMembers[0]);
end;

function TTekushie_znacheniya._GetTek_akt_priyoma: Integer;
begin
  Result := M_Tek_akt_priyoma.AsInteger;
end;

procedure TTekushie_znacheniya._SetTek_akt_priyoma(const NewValue: Integer);
begin
  M_Tek_akt_priyoma.AsInteger := NewValue;
end;

function TTekushie_znacheniya._Get_M_Tek_akt_vydachi: TBAInteger;
begin
  assert(ValidateMember('TTekushie_znacheniya', 'Tek_akt_vydachi', 1, TBAInteger));
  Result := TBAInteger(BoldMembers[1]);
end;

function TTekushie_znacheniya._GetTek_akt_vydachi: Integer;
begin
  Result := M_Tek_akt_vydachi.AsInteger;
end;

procedure TTekushie_znacheniya._SetTek_akt_vydachi(const NewValue: Integer);
begin
  M_Tek_akt_vydachi.AsInteger := NewValue;
end;

function TTekushie_znacheniya._Get_M_Tek_schyot: TBAInteger;
begin
  assert(ValidateMember('TTekushie_znacheniya', 'Tek_schyot', 2, TBAInteger));
  Result := TBAInteger(BoldMembers[2]);
end;

function TTekushie_znacheniya._GetTek_schyot: Integer;
begin
  Result := M_Tek_schyot.AsInteger;
end;

procedure TTekushie_znacheniya._SetTek_schyot(const NewValue: Integer);
begin
  M_Tek_schyot.AsInteger := NewValue;
end;

function TTekushie_znacheniya._Get_M_Startovaya_data_uch: TBADate;
begin
  assert(ValidateMember('TTekushie_znacheniya', 'Startovaya_data_uch', 3, TBADate));
  Result := TBADate(BoldMembers[3]);
end;

function TTekushie_znacheniya._GetStartovaya_data_uch: TDate;
begin
  Result := M_Startovaya_data_uch.AsDate;
end;

procedure TTekushie_znacheniya._SetStartovaya_data_uch(const NewValue: TDate);
begin
  M_Startovaya_data_uch.AsDate := NewValue;
end;

function TTekushie_znacheniya._Get_M_Konechn_data_uch: TBADate;
begin
  assert(ValidateMember('TTekushie_znacheniya', 'Konechn_data_uch', 4, TBADate));
  Result := TBADate(BoldMembers[4]);
end;

function TTekushie_znacheniya._GetKonechn_data_uch: TDate;
begin
  Result := M_Konechn_data_uch.AsDate;
end;

procedure TTekushie_znacheniya._SetKonechn_data_uch(const NewValue: TDate);
begin
  M_Konechn_data_uch.AsDate := NewValue;
end;

procedure TTekushie_znacheniyaList.Add(NewObject: TTekushie_znacheniya);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TTekushie_znacheniyaList.IndexOf(anObject: TTekushie_znacheniya): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TTekushie_znacheniyaList.Includes(anObject: TTekushie_znacheniya) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TTekushie_znacheniyaList.AddNew: TTekushie_znacheniya;
begin
  result := TTekushie_znacheniya(InternalAddNew);
end;

procedure TTekushie_znacheniyaList.Insert(index: Integer; NewObject: TTekushie_znacheniya);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TTekushie_znacheniyaList.GetBoldObject(index: Integer): TTekushie_znacheniya;
begin
  result := TTekushie_znacheniya(GetElement(index));
end;

procedure TTekushie_znacheniyaList.SetBoldObject(index: Integer; NewObject: TTekushie_znacheniya);
begin;
  SetElement(index, NewObject);
end;

{ TSotrudnik_remont }

function TSotrudnik_remont._Get_M_VseFlag: TBABoolean;
begin
  assert(ValidateMember('TSotrudnik_remont', 'VseFlag', 26, TBABoolean));
  Result := TBABoolean(BoldMembers[26]);
end;

function TSotrudnik_remont._GetVseFlag: Boolean;
begin
  Result := M_VseFlag.AsBoolean;
end;

procedure TSotrudnik_remont._SetVseFlag(const NewValue: Boolean);
begin
  M_VseFlag.AsBoolean := NewValue;
end;

function TSotrudnik_remont._Gettehnik_zanimaetsya: TSostav_priemki_vydachiList;
begin
  assert(ValidateMember('TSotrudnik_remont', 'tehnik_zanimaetsya', 27, TSostav_priemki_vydachiList));
  Result := TSostav_priemki_vydachiList(BoldMembers[27]);
end;

function TSotrudnik_remont._Get_M_sotrudnik_nahoditsya_na: TBoldObjectReference;
begin
  assert(ValidateMember('TSotrudnik_remont', 'sotrudnik_nahoditsya_na', 28, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[28]);
end;

function TSotrudnik_remont._Getsotrudnik_nahoditsya_na: TDolgnostj;
begin
  assert(not assigned(M_sotrudnik_nahoditsya_na.BoldObject) or (M_sotrudnik_nahoditsya_na.BoldObject is TDolgnostj), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'sotrudnik_nahoditsya_na', M_sotrudnik_nahoditsya_na.BoldObject.ClassName, 'TDolgnostj']));
  Result := TDolgnostj(M_sotrudnik_nahoditsya_na.BoldObject);
end;

procedure TSotrudnik_remont._Setsotrudnik_nahoditsya_na(const value: TDolgnostj);
begin
  M_sotrudnik_nahoditsya_na.BoldObject := value;
end;

function TSotrudnik_remont._Getkak_menedger_osush: TPriemka_vydachaList;
begin
  assert(ValidateMember('TSotrudnik_remont', 'kak_menedger_osush', 29, TPriemka_vydachaList));
  Result := TPriemka_vydachaList(BoldMembers[29]);
end;

procedure TSotrudnik_remontList.Add(NewObject: TSotrudnik_remont);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TSotrudnik_remontList.IndexOf(anObject: TSotrudnik_remont): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TSotrudnik_remontList.Includes(anObject: TSotrudnik_remont) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TSotrudnik_remontList.AddNew: TSotrudnik_remont;
begin
  result := TSotrudnik_remont(InternalAddNew);
end;

procedure TSotrudnik_remontList.Insert(index: Integer; NewObject: TSotrudnik_remont);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TSotrudnik_remontList.GetBoldObject(index: Integer): TSotrudnik_remont;
begin
  result := TSotrudnik_remont(GetElement(index));
end;

procedure TSotrudnik_remontList.SetBoldObject(index: Integer; NewObject: TSotrudnik_remont);
begin;
  SetElement(index, NewObject);
end;

{ TChastnoe_lico }

function TChastnoe_lico._Getfiz_klient_dlya_uslugi: TPriemka_vydachaList;
begin
  assert(ValidateMember('TChastnoe_lico', 'fiz_klient_dlya_uslugi', 26, TPriemka_vydachaList));
  Result := TPriemka_vydachaList(BoldMembers[26]);
end;

procedure TChastnoe_licoList.Add(NewObject: TChastnoe_lico);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TChastnoe_licoList.IndexOf(anObject: TChastnoe_lico): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TChastnoe_licoList.Includes(anObject: TChastnoe_lico) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TChastnoe_licoList.AddNew: TChastnoe_lico;
begin
  result := TChastnoe_lico(InternalAddNew);
end;

procedure TChastnoe_licoList.Insert(index: Integer; NewObject: TChastnoe_lico);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TChastnoe_licoList.GetBoldObject(index: Integer): TChastnoe_lico;
begin
  result := TChastnoe_lico(GetElement(index));
end;

procedure TChastnoe_licoList.SetBoldObject(index: Integer; NewObject: TChastnoe_lico);
begin;
  SetElement(index, NewObject);
end;

{ TYuridich_lico }

function TYuridich_lico._Getyur_klient_uslugi: TPriemka_vydachaList;
begin
  assert(ValidateMember('TYuridich_lico', 'yur_klient_uslugi', 26, TPriemka_vydachaList));
  Result := TPriemka_vydachaList(BoldMembers[26]);
end;

function TYuridich_lico._Getoplachivaetsya: TPriemka_vydachaList;
begin
  assert(ValidateMember('TYuridich_lico', 'oplachivaetsya', 27, TPriemka_vydachaList));
  Result := TPriemka_vydachaList(BoldMembers[27]);
end;

procedure TYuridich_licoList.Add(NewObject: TYuridich_lico);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TYuridich_licoList.IndexOf(anObject: TYuridich_lico): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TYuridich_licoList.Includes(anObject: TYuridich_lico) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TYuridich_licoList.AddNew: TYuridich_lico;
begin
  result := TYuridich_lico(InternalAddNew);
end;

procedure TYuridich_licoList.Insert(index: Integer; NewObject: TYuridich_lico);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TYuridich_licoList.GetBoldObject(index: Integer): TYuridich_lico;
begin
  result := TYuridich_lico(GetElement(index));
end;

procedure TYuridich_licoList.SetBoldObject(index: Integer; NewObject: TYuridich_lico);
begin;
  SetElement(index, NewObject);
end;

{ TDolgnostj }

function TDolgnostj._Getdolgnostj_prinadlegit: TSotrudnik_remontList;
begin
  assert(ValidateMember('TDolgnostj', 'dolgnostj_prinadlegit', 3, TSotrudnik_remontList));
  Result := TSotrudnik_remontList(BoldMembers[3]);
end;

procedure TDolgnostjList.Add(NewObject: TDolgnostj);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TDolgnostjList.IndexOf(anObject: TDolgnostj): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TDolgnostjList.Includes(anObject: TDolgnostj) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TDolgnostjList.AddNew: TDolgnostj;
begin
  result := TDolgnostj(InternalAddNew);
end;

procedure TDolgnostjList.Insert(index: Integer; NewObject: TDolgnostj);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TDolgnostjList.GetBoldObject(index: Integer): TDolgnostj;
begin
  result := TDolgnostj(GetElement(index));
end;

procedure TDolgnostjList.SetBoldObject(index: Integer; NewObject: TDolgnostj);
begin;
  SetElement(index, NewObject);
end;

{ TOperaciya }

function TOperaciya._Get_M_Stoimostj: TBAString;
begin
  assert(ValidateMember('TOperaciya', 'Stoimostj', 3, TBAString));
  Result := TBAString(BoldMembers[3]);
end;

function TOperaciya._GetStoimostj: String;
begin
  Result := M_Stoimostj.AsString;
end;

procedure TOperaciya._SetStoimostj(const NewValue: String);
begin
  M_Stoimostj.AsString := NewValue;
end;

function TOperaciya._Getproizvoditsya_kak_etap: TRashod_rem_materialovList;
begin
  assert(ValidateMember('TOperaciya', 'proizvoditsya_kak_etap', 4, TRashod_rem_materialovList));
  Result := TRashod_rem_materialovList(BoldMembers[4]);
end;

procedure TOperaciyaList.Add(NewObject: TOperaciya);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TOperaciyaList.IndexOf(anObject: TOperaciya): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TOperaciyaList.Includes(anObject: TOperaciya) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TOperaciyaList.AddNew: TOperaciya;
begin
  result := TOperaciya(InternalAddNew);
end;

procedure TOperaciyaList.Insert(index: Integer; NewObject: TOperaciya);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TOperaciyaList.GetBoldObject(index: Integer): TOperaciya;
begin
  result := TOperaciya(GetElement(index));
end;

procedure TOperaciyaList.SetBoldObject(index: Integer; NewObject: TOperaciya);
begin;
  SetElement(index, NewObject);
end;

{ TTip_operacii }

function TTip_operacii._Get_M_VseFlag: TBABoolean;
begin
  assert(ValidateMember('TTip_operacii', 'VseFlag', 3, TBABoolean));
  Result := TBABoolean(BoldMembers[3]);
end;

function TTip_operacii._GetVseFlag: Boolean;
begin
  Result := M_VseFlag.AsBoolean;
end;

procedure TTip_operacii._SetVseFlag(const NewValue: Boolean);
begin
  M_VseFlag.AsBoolean := NewValue;
end;

function TTip_operacii._Gettip_oper_imeet: TSostav_priemki_vydachiList;
begin
  assert(ValidateMember('TTip_operacii', 'tip_oper_imeet', 4, TSostav_priemki_vydachiList));
  Result := TSostav_priemki_vydachiList(BoldMembers[4]);
end;

procedure TTip_operaciiList.Add(NewObject: TTip_operacii);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TTip_operaciiList.IndexOf(anObject: TTip_operacii): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TTip_operaciiList.Includes(anObject: TTip_operacii) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TTip_operaciiList.AddNew: TTip_operacii;
begin
  result := TTip_operacii(InternalAddNew);
end;

procedure TTip_operaciiList.Insert(index: Integer; NewObject: TTip_operacii);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TTip_operaciiList.GetBoldObject(index: Integer): TTip_operacii;
begin
  result := TTip_operacii(GetElement(index));
end;

procedure TTip_operaciiList.SetBoldObject(index: Integer; NewObject: TTip_operacii);
begin;
  SetElement(index, NewObject);
end;

{ TTip_remontiruemogo_izdeliya }

function TTip_remontiruemogo_izdeliya._Get_M_PunktNovyi: TBABoolean;
begin
  assert(ValidateMember('TTip_remontiruemogo_izdeliya', 'PunktNovyi', 3, TBABoolean));
  Result := TBABoolean(BoldMembers[3]);
end;

function TTip_remontiruemogo_izdeliya._GetPunktNovyi: Boolean;
begin
  Result := M_PunktNovyi.AsBoolean;
end;

procedure TTip_remontiruemogo_izdeliya._SetPunktNovyi(const NewValue: Boolean);
begin
  M_PunktNovyi.AsBoolean := NewValue;
end;

function TTip_remontiruemogo_izdeliya._Getopredelyaet_tip_dlya: TSostav_priemki_vydachiList;
begin
  assert(ValidateMember('TTip_remontiruemogo_izdeliya', 'opredelyaet_tip_dlya', 4, TSostav_priemki_vydachiList));
  Result := TSostav_priemki_vydachiList(BoldMembers[4]);
end;

procedure TTip_remontiruemogo_izdeliyaList.Add(NewObject: TTip_remontiruemogo_izdeliya);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TTip_remontiruemogo_izdeliyaList.IndexOf(anObject: TTip_remontiruemogo_izdeliya): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TTip_remontiruemogo_izdeliyaList.Includes(anObject: TTip_remontiruemogo_izdeliya) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TTip_remontiruemogo_izdeliyaList.AddNew: TTip_remontiruemogo_izdeliya;
begin
  result := TTip_remontiruemogo_izdeliya(InternalAddNew);
end;

procedure TTip_remontiruemogo_izdeliyaList.Insert(index: Integer; NewObject: TTip_remontiruemogo_izdeliya);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TTip_remontiruemogo_izdeliyaList.GetBoldObject(index: Integer): TTip_remontiruemogo_izdeliya;
begin
  result := TTip_remontiruemogo_izdeliya(GetElement(index));
end;

procedure TTip_remontiruemogo_izdeliyaList.SetBoldObject(index: Integer; NewObject: TTip_remontiruemogo_izdeliya);
begin;
  SetElement(index, NewObject);
end;

{ TTip_tovara }

function TTip_tovara._Get_M_VseFlag: TBABoolean;
begin
  assert(ValidateMember('TTip_tovara', 'VseFlag', 3, TBABoolean));
  Result := TBABoolean(BoldMembers[3]);
end;

function TTip_tovara._GetVseFlag: Boolean;
begin
  Result := M_VseFlag.AsBoolean;
end;

procedure TTip_tovara._SetVseFlag(const NewValue: Boolean);
begin
  M_VseFlag.AsBoolean := NewValue;
end;

function TTip_tovara._Getimeet_rashod: TRashod_po_operaciiList;
begin
  assert(ValidateMember('TTip_tovara', 'imeet_rashod', 4, TRashod_po_operaciiList));
  Result := TRashod_po_operaciiList(BoldMembers[4]);
end;

procedure TTip_tovaraList.Add(NewObject: TTip_tovara);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TTip_tovaraList.IndexOf(anObject: TTip_tovara): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TTip_tovaraList.Includes(anObject: TTip_tovara) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TTip_tovaraList.AddNew: TTip_tovara;
begin
  result := TTip_tovara(InternalAddNew);
end;

procedure TTip_tovaraList.Insert(index: Integer; NewObject: TTip_tovara);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TTip_tovaraList.GetBoldObject(index: Integer): TTip_tovara;
begin
  result := TTip_tovara(GetElement(index));
end;

procedure TTip_tovaraList.SetBoldObject(index: Integer; NewObject: TTip_tovara);
begin;
  SetElement(index, NewObject);
end;

function GeneratedCodeCRC: String;
begin
  result := '2029043128';
end;

procedure InstallObjectListClasses(BoldObjectListClasses: TBoldGeneratedClassList);
begin
  BoldObjectListClasses.AddObjectEntry('BusinessClassesRoot', TBusinessClassesRootList);
  BoldObjectListClasses.AddObjectEntry('Persona', TPersonaList);
  BoldObjectListClasses.AddObjectEntry('Priemka_vydacha', TPriemka_vydachaList);
  BoldObjectListClasses.AddObjectEntry('Rashod_po_operacii', TRashod_po_operaciiList);
  BoldObjectListClasses.AddObjectEntry('Rashod_rem_materialov', TRashod_rem_materialovList);
  BoldObjectListClasses.AddObjectEntry('Sostav_priemki_vydachi', TSostav_priemki_vydachiList);
  BoldObjectListClasses.AddObjectEntry('Spravochnik', TSpravochnikList);
  BoldObjectListClasses.AddObjectEntry('Tekushie_znacheniya', TTekushie_znacheniyaList);
  BoldObjectListClasses.AddObjectEntry('Sotrudnik_remont', TSotrudnik_remontList);
  BoldObjectListClasses.AddObjectEntry('Chastnoe_lico', TChastnoe_licoList);
  BoldObjectListClasses.AddObjectEntry('Yuridich_lico', TYuridich_licoList);
  BoldObjectListClasses.AddObjectEntry('Dolgnostj', TDolgnostjList);
  BoldObjectListClasses.AddObjectEntry('Operaciya', TOperaciyaList);
  BoldObjectListClasses.AddObjectEntry('Tip_operacii', TTip_operaciiList);
  BoldObjectListClasses.AddObjectEntry('Tip_remontiruemogo_izdeliya', TTip_remontiruemogo_izdeliyaList);
  BoldObjectListClasses.AddObjectEntry('Tip_tovara', TTip_tovaraList);
end;

procedure InstallBusinessClasses(BoldObjectClasses: TBoldGeneratedClassList);
begin
  BoldObjectClasses.AddObjectEntry('BusinessClassesRoot', TBusinessClassesRoot);
  BoldObjectClasses.AddObjectEntry('Persona', TPersona);
  BoldObjectClasses.AddObjectEntry('Priemka_vydacha', TPriemka_vydacha);
  BoldObjectClasses.AddObjectEntry('Rashod_po_operacii', TRashod_po_operacii);
  BoldObjectClasses.AddObjectEntry('Rashod_rem_materialov', TRashod_rem_materialov);
  BoldObjectClasses.AddObjectEntry('Sostav_priemki_vydachi', TSostav_priemki_vydachi);
  BoldObjectClasses.AddObjectEntry('Spravochnik', TSpravochnik);
  BoldObjectClasses.AddObjectEntry('Tekushie_znacheniya', TTekushie_znacheniya);
  BoldObjectClasses.AddObjectEntry('Sotrudnik_remont', TSotrudnik_remont);
  BoldObjectClasses.AddObjectEntry('Chastnoe_lico', TChastnoe_lico);
  BoldObjectClasses.AddObjectEntry('Yuridich_lico', TYuridich_lico);
  BoldObjectClasses.AddObjectEntry('Dolgnostj', TDolgnostj);
  BoldObjectClasses.AddObjectEntry('Operaciya', TOperaciya);
  BoldObjectClasses.AddObjectEntry('Tip_operacii', TTip_operacii);
  BoldObjectClasses.AddObjectEntry('Tip_remontiruemogo_izdeliya', TTip_remontiruemogo_izdeliya);
  BoldObjectClasses.AddObjectEntry('Tip_tovara', TTip_tovara);
end;

var
  CodeDescriptor: TBoldGeneratedCodeDescriptor;

initialization
  CodeDescriptor := GeneratedCodes.AddGeneratedCodeDescriptorWithFunc('BusinessClasses', InstallBusinessClasses, InstallObjectListClasses, GeneratedCodeCRC);
finalization
  GeneratedCodes.Remove(CodeDescriptor);
end.

