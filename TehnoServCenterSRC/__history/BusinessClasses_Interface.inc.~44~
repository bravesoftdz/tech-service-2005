(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 13.01.2006 0:49:04          *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

{$IFNDEF BusinessClasses_Interface.inc}
{$DEFINE BusinessClasses_Interface.inc}

{$IFNDEF BusinessClasses_unitheader}
unit BusinessClasses;
{$ENDIF}

interface

uses
  // interface uses
  // interface dependencies
  // attribute classes
  BoldAttributes,
  // other
  Classes,
  Controls, // for TDate
  SysUtils,
  BoldDefs,
  BoldSubscription,
  BoldDeriver,
  BoldElements,
  BoldDomainElement,
  BoldSystemRT,
  BoldSystem;

type
  { forward declarations of all classes }

  TBusinessClassesRoot = class;
  TBusinessClassesRootList = class;
  TPersona = class;
  TPersonaList = class;
  TPriemka_vydacha = class;
  TPriemka_vydachaList = class;
  TRashod_po_operacii = class;
  TRashod_po_operaciiList = class;
  TRashod_rem_materialov = class;
  TRashod_rem_materialovList = class;
  TSostav_priemki_vydachi = class;
  TSostav_priemki_vydachiList = class;
  TSpravochnik = class;
  TSpravochnikList = class;
  TTekushie_znacheniya = class;
  TTekushie_znacheniyaList = class;
  TPoljzovatelj = class;
  TPoljzovateljList = class;
  TSotrudnik_remont = class;
  TSotrudnik_remontList = class;
  TChastnoe_lico = class;
  TChastnoe_licoList = class;
  TYuridich_lico = class;
  TYuridich_licoList = class;
  TDolgnostj = class;
  TDolgnostjList = class;
  TOperaciya = class;
  TOperaciyaList = class;
  TTip_operacii = class;
  TTip_operaciiList = class;
  TTip_remontiruemogo_izdeliya = class;
  TTip_remontiruemogo_izdeliyaList = class;
  TTip_tovara = class;
  TTip_tovaraList = class;

  TBusinessClassesRoot = class(TBoldObject)
  private
  protected
  public
  end;

  TPersona = class(TBusinessClassesRoot)
  private
    function _Get_M_Familiya: TBAString;
    function _GetFamiliya: String;
    procedure _SetFamiliya(const NewValue: String);
    function _Get_M_Imya: TBAString;
    function _GetImya: String;
    procedure _SetImya(const NewValue: String);
    function _Get_M_Otchestvo: TBAString;
    function _GetOtchestvo: String;
    procedure _SetOtchestvo(const NewValue: String);
    function _Get_M_Ulica: TBAString;
    function _GetUlica: String;
    procedure _SetUlica(const NewValue: String);
    function _Get_M_Dom: TBAInteger;
    function _GetDom: Integer;
    procedure _SetDom(const NewValue: Integer);
    function _Get_M_Kvartira: TBAInteger;
    function _GetKvartira: Integer;
    procedure _SetKvartira(const NewValue: Integer);
    function _Get_M_Korpus: TBAInteger;
    function _GetKorpus: Integer;
    procedure _SetKorpus(const NewValue: Integer);
    function _Get_M_Mobiljnyi_telefon: TBAString;
    function _GetMobiljnyi_telefon: String;
    procedure _SetMobiljnyi_telefon(const NewValue: String);
    function _Get_M_Rabochii_telefon: TBAString;
    function _GetRabochii_telefon: String;
    procedure _SetRabochii_telefon(const NewValue: String);
    function _Get_M_Domashnii_telefon: TBAString;
    function _GetDomashnii_telefon: String;
    procedure _SetDomashnii_telefon(const NewValue: String);
    function _Get_M_Elektronnyi_adres: TBAString;
    function _GetElektronnyi_adres: String;
    procedure _SetElektronnyi_adres(const NewValue: String);
    function _Get_M_Strana: TBAString;
    function _GetStrana: String;
    procedure _SetStrana(const NewValue: String);
    function _Get_M_Oblastj: TBAString;
    function _GetOblastj: String;
    procedure _SetOblastj(const NewValue: String);
    function _Get_M_Gorod: TBAString;
    function _GetGorod: String;
    procedure _SetGorod(const NewValue: String);
    function _Get_M_PolnoeImya: TBAString;
    function _GetPolnoeImya: String;
    function _Get_M_BIK: TBAString;
    function _GetBIK: String;
    procedure _SetBIK(const NewValue: String);
    function _Get_M_Naimenovanie: TBAString;
    function _GetNaimenovanie: String;
    procedure _SetNaimenovanie(const NewValue: String);
    function _Get_M_YavlyaetsyaVlad: TBABoolean;
    function _GetYavlyaetsyaVlad: Boolean;
    procedure _SetYavlyaetsyaVlad(const NewValue: Boolean);
    function _Get_M_Rukovoditelj: TBAString;
    function _GetRukovoditelj: String;
    procedure _SetRukovoditelj(const NewValue: String);
    function _Get_M_GlBuhgalter: TBAString;
    function _GetGlBuhgalter: String;
    procedure _SetGlBuhgalter(const NewValue: String);
    function _Get_M_INN: TBAString;
    function _GetINN: String;
    procedure _SetINN(const NewValue: String);
    function _Get_M_Rasch__schet: TBAString;
    function _GetRasch__schet: String;
    procedure _SetRasch__schet(const NewValue: String);
    function _Get_M_KPP: TBAString;
    function _GetKPP: String;
    procedure _SetKPP(const NewValue: String);
    function _Get_M_Tip_organizacii: TBAString;
    function _GetTip_organizacii: String;
    procedure _SetTip_organizacii(const NewValue: String);
    function _Get_M_Kor_schet: TBAString;
    function _GetKor_schet: String;
    procedure _SetKor_schet(const NewValue: String);
    function _Get_M_Naim__banka: TBAString;
    function _GetNaim__banka: String;
    procedure _SetNaim__banka(const NewValue: String);
  protected
  public
    property M_Familiya: TBAString read _Get_M_Familiya;
    property M_Imya: TBAString read _Get_M_Imya;
    property M_Otchestvo: TBAString read _Get_M_Otchestvo;
    property M_Ulica: TBAString read _Get_M_Ulica;
    property M_Dom: TBAInteger read _Get_M_Dom;
    property M_Kvartira: TBAInteger read _Get_M_Kvartira;
    property M_Korpus: TBAInteger read _Get_M_Korpus;
    property M_Mobiljnyi_telefon: TBAString read _Get_M_Mobiljnyi_telefon;
    property M_Rabochii_telefon: TBAString read _Get_M_Rabochii_telefon;
    property M_Domashnii_telefon: TBAString read _Get_M_Domashnii_telefon;
    property M_Elektronnyi_adres: TBAString read _Get_M_Elektronnyi_adres;
    property M_Strana: TBAString read _Get_M_Strana;
    property M_Oblastj: TBAString read _Get_M_Oblastj;
    property M_Gorod: TBAString read _Get_M_Gorod;
    property M_PolnoeImya: TBAString read _Get_M_PolnoeImya;
    property M_BIK: TBAString read _Get_M_BIK;
    property M_Naimenovanie: TBAString read _Get_M_Naimenovanie;
    property M_YavlyaetsyaVlad: TBABoolean read _Get_M_YavlyaetsyaVlad;
    property M_Rukovoditelj: TBAString read _Get_M_Rukovoditelj;
    property M_GlBuhgalter: TBAString read _Get_M_GlBuhgalter;
    property M_INN: TBAString read _Get_M_INN;
    property M_Rasch__schet: TBAString read _Get_M_Rasch__schet;
    property M_KPP: TBAString read _Get_M_KPP;
    property M_Tip_organizacii: TBAString read _Get_M_Tip_organizacii;
    property M_Kor_schet: TBAString read _Get_M_Kor_schet;
    property M_Naim__banka: TBAString read _Get_M_Naim__banka;
    property Familiya: String read _GetFamiliya write _SetFamiliya;
    property Imya: String read _GetImya write _SetImya;
    property Otchestvo: String read _GetOtchestvo write _SetOtchestvo;
    property Ulica: String read _GetUlica write _SetUlica;
    property Dom: Integer read _GetDom write _SetDom;
    property Kvartira: Integer read _GetKvartira write _SetKvartira;
    property Korpus: Integer read _GetKorpus write _SetKorpus;
    property Mobiljnyi_telefon: String read _GetMobiljnyi_telefon write _SetMobiljnyi_telefon;
    property Rabochii_telefon: String read _GetRabochii_telefon write _SetRabochii_telefon;
    property Domashnii_telefon: String read _GetDomashnii_telefon write _SetDomashnii_telefon;
    property Elektronnyi_adres: String read _GetElektronnyi_adres write _SetElektronnyi_adres;
    property Strana: String read _GetStrana write _SetStrana;
    property Oblastj: String read _GetOblastj write _SetOblastj;
    property Gorod: String read _GetGorod write _SetGorod;
    property PolnoeImya: String read _GetPolnoeImya;
    property BIK: String read _GetBIK write _SetBIK;
    property Naimenovanie: String read _GetNaimenovanie write _SetNaimenovanie;
    property YavlyaetsyaVlad: Boolean read _GetYavlyaetsyaVlad write _SetYavlyaetsyaVlad;
    property Rukovoditelj: String read _GetRukovoditelj write _SetRukovoditelj;
    property GlBuhgalter: String read _GetGlBuhgalter write _SetGlBuhgalter;
    property INN: String read _GetINN write _SetINN;
    property Rasch__schet: String read _GetRasch__schet write _SetRasch__schet;
    property KPP: String read _GetKPP write _SetKPP;
    property Tip_organizacii: String read _GetTip_organizacii write _SetTip_organizacii;
    property Kor_schet: String read _GetKor_schet write _SetKor_schet;
    property Naim__banka: String read _GetNaim__banka write _SetNaim__banka;
  end;

  TPriemka_vydacha = class(TBusinessClassesRoot)
  private
    function _Get_M_YavlBezNal: TBABoolean;
    function _GetYavlBezNal: Boolean;
    procedure _SetYavlBezNal(const NewValue: Boolean);
    function _Get_M_OtpushenSRemontaPolnostjyu: TBABoolean;
    function _GetOtpushenSRemontaPolnostjyu: Boolean;
    function _Get_M_OplachenBezNal: TBABoolean;
    function _GetOplachenBezNal: Boolean;
    procedure _SetOplachenBezNal(const NewValue: Boolean);
    function _Get_M_DataPriema: TBADate;
    function _GetDataPriema: TDate;
    procedure _SetDataPriema(const NewValue: TDate);
    function _Get_M_DataVydachi: TBADate;
    function _GetDataVydachi: TDate;
    procedure _SetDataVydachi(const NewValue: TDate);
    function _Get_M_Kolichestvo_pozicii: TBAInteger;
    function _GetKolichestvo_pozicii: Integer;
    function _Get_M_KlientYavlYurLicom: TBABoolean;
    function _GetKlientYavlYurLicom: Boolean;
    procedure _SetKlientYavlYurLicom(const NewValue: Boolean);
    function _Get_M_Nomer_dokumenta: TBAInteger;
    function _GetNomer_dokumenta: Integer;
    procedure _SetNomer_dokumenta(const NewValue: Integer);
    function _Get_M_DataVydachiStr: TBAString;
    function _GetDataVydachiStr: String;
    function _Get_M_OtpushenNoNePoln: TBABoolean;
    function _GetOtpushenNoNePoln: Boolean;
    function _Get_M_Summa_zakaza: TBAFloat;
    function _GetSumma_zakaza: double;
    function _Get_M_ImyaKlienta: TBAString;
    function _GetImyaKlienta: String;
    function _Get_M_TelefonKlienta: TBAString;
    function _GetTelefonKlienta: String;
    function _Get_M_Plateljshik: TBAString;
    function _GetPlateljshik: String;
    function _Get_M_Nomer_schyota: TBAString;
    function _GetNomer_schyota: String;
    procedure _SetNomer_schyota(const NewValue: String);
    function _Get_M_Vypis_schyot: TBABoolean;
    function _GetVypis_schyot: Boolean;
    procedure _SetVypis_schyot(const NewValue: Boolean);
    function _Get_M_DataVypiskiSchyota: TBADate;
    function _GetDataVypiskiSchyota: TDate;
    procedure _SetDataVypiskiSchyota(const NewValue: TDate);
    function _GetOtdeljnaya_usluga_v: TSostav_priemki_vydachiList;
    function _Getusluga_dlya_fiz_lica: TChastnoe_lico;
    function _Get_M_usluga_dlya_fiz_lica: TBoldObjectReference;
    procedure _Setusluga_dlya_fiz_lica(const value: TChastnoe_lico);
    function _Getusluga_dlya_yur_lica: TYuridich_lico;
    function _Get_M_usluga_dlya_yur_lica: TBoldObjectReference;
    procedure _Setusluga_dlya_yur_lica(const value: TYuridich_lico);
    function _Getzaimaetsya_uslugoi: TSotrudnik_remont;
    function _Get_M_zaimaetsya_uslugoi: TBoldObjectReference;
    procedure _Setzaimaetsya_uslugoi(const value: TSotrudnik_remont);
    function _Getoplachivaet: TYuridich_lico;
    function _Get_M_oplachivaet: TBoldObjectReference;
    procedure _Setoplachivaet(const value: TYuridich_lico);
  protected
  public
    property M_YavlBezNal: TBABoolean read _Get_M_YavlBezNal;
    property M_OtpushenSRemontaPolnostjyu: TBABoolean read _Get_M_OtpushenSRemontaPolnostjyu;
    property M_OplachenBezNal: TBABoolean read _Get_M_OplachenBezNal;
    property M_DataPriema: TBADate read _Get_M_DataPriema;
    property M_DataVydachi: TBADate read _Get_M_DataVydachi;
    property M_Kolichestvo_pozicii: TBAInteger read _Get_M_Kolichestvo_pozicii;
    property M_KlientYavlYurLicom: TBABoolean read _Get_M_KlientYavlYurLicom;
    property M_Nomer_dokumenta: TBAInteger read _Get_M_Nomer_dokumenta;
    property M_DataVydachiStr: TBAString read _Get_M_DataVydachiStr;
    property M_OtpushenNoNePoln: TBABoolean read _Get_M_OtpushenNoNePoln;
    property M_Summa_zakaza: TBAFloat read _Get_M_Summa_zakaza;
    property M_ImyaKlienta: TBAString read _Get_M_ImyaKlienta;
    property M_TelefonKlienta: TBAString read _Get_M_TelefonKlienta;
    property M_Plateljshik: TBAString read _Get_M_Plateljshik;
    property M_Nomer_schyota: TBAString read _Get_M_Nomer_schyota;
    property M_Vypis_schyot: TBABoolean read _Get_M_Vypis_schyot;
    property M_DataVypiskiSchyota: TBADate read _Get_M_DataVypiskiSchyota;
    property M_Otdeljnaya_usluga_v: TSostav_priemki_vydachiList read _GetOtdeljnaya_usluga_v;
    property M_usluga_dlya_fiz_lica: TBoldObjectReference read _Get_M_usluga_dlya_fiz_lica;
    property M_usluga_dlya_yur_lica: TBoldObjectReference read _Get_M_usluga_dlya_yur_lica;
    property M_zaimaetsya_uslugoi: TBoldObjectReference read _Get_M_zaimaetsya_uslugoi;
    property M_oplachivaet: TBoldObjectReference read _Get_M_oplachivaet;
    property YavlBezNal: Boolean read _GetYavlBezNal write _SetYavlBezNal;
    property OtpushenSRemontaPolnostjyu: Boolean read _GetOtpushenSRemontaPolnostjyu;
    property OplachenBezNal: Boolean read _GetOplachenBezNal write _SetOplachenBezNal;
    property DataPriema: TDate read _GetDataPriema write _SetDataPriema;
    property DataVydachi: TDate read _GetDataVydachi write _SetDataVydachi;
    property Kolichestvo_pozicii: Integer read _GetKolichestvo_pozicii;
    property KlientYavlYurLicom: Boolean read _GetKlientYavlYurLicom write _SetKlientYavlYurLicom;
    property Nomer_dokumenta: Integer read _GetNomer_dokumenta write _SetNomer_dokumenta;
    property DataVydachiStr: String read _GetDataVydachiStr;
    property OtpushenNoNePoln: Boolean read _GetOtpushenNoNePoln;
    property Summa_zakaza: double read _GetSumma_zakaza;
    property ImyaKlienta: String read _GetImyaKlienta;
    property TelefonKlienta: String read _GetTelefonKlienta;
    property Plateljshik: String read _GetPlateljshik;
    property Nomer_schyota: String read _GetNomer_schyota write _SetNomer_schyota;
    property Vypis_schyot: Boolean read _GetVypis_schyot write _SetVypis_schyot;
    property DataVypiskiSchyota: TDate read _GetDataVypiskiSchyota write _SetDataVypiskiSchyota;
    property Otdeljnaya_usluga_v: TSostav_priemki_vydachiList read _GetOtdeljnaya_usluga_v;
    property usluga_dlya_fiz_lica: TChastnoe_lico read _Getusluga_dlya_fiz_lica write _Setusluga_dlya_fiz_lica;
    property usluga_dlya_yur_lica: TYuridich_lico read _Getusluga_dlya_yur_lica write _Setusluga_dlya_yur_lica;
    property zaimaetsya_uslugoi: TSotrudnik_remont read _Getzaimaetsya_uslugoi write _Setzaimaetsya_uslugoi;
    property oplachivaet: TYuridich_lico read _Getoplachivaet write _Setoplachivaet;
  end;

  TRashod_po_operacii = class(TBusinessClassesRoot)
  private
    function _Get_M_Kolichestvo: TBAFloat;
    function _GetKolichestvo: double;
    procedure _SetKolichestvo(const NewValue: double);
    function _Get_M_Stoimostj: TBAFloat;
    function _GetStoimostj: double;
    procedure _SetStoimostj(const NewValue: double);
    function _Get_M_Summa: TBAFloat;
    function _GetSumma: double;
    function _Get_M_Tip_tovara: TBAString;
    function _GetTip_tovara: String;
    function _Getyavlyaetsya_po_tipu: TTip_tovara;
    function _Get_M_yavlyaetsya_po_tipu: TBoldObjectReference;
    procedure _Setyavlyaetsya_po_tipu(const value: TTip_tovara);
    function _Getvhodit_kak_poz_rashoda: TRashod_rem_materialov;
    function _Get_M_vhodit_kak_poz_rashoda: TBoldObjectReference;
    procedure _Setvhodit_kak_poz_rashoda(const value: TRashod_rem_materialov);
  protected
  public
    property M_Kolichestvo: TBAFloat read _Get_M_Kolichestvo;
    property M_Stoimostj: TBAFloat read _Get_M_Stoimostj;
    property M_Summa: TBAFloat read _Get_M_Summa;
    property M_Tip_tovara: TBAString read _Get_M_Tip_tovara;
    property M_yavlyaetsya_po_tipu: TBoldObjectReference read _Get_M_yavlyaetsya_po_tipu;
    property M_vhodit_kak_poz_rashoda: TBoldObjectReference read _Get_M_vhodit_kak_poz_rashoda;
    property Kolichestvo: double read _GetKolichestvo write _SetKolichestvo;
    property Stoimostj: double read _GetStoimostj write _SetStoimostj;
    property Summa: double read _GetSumma;
    property Tip_tovara: String read _GetTip_tovara;
    property yavlyaetsya_po_tipu: TTip_tovara read _Getyavlyaetsya_po_tipu write _Setyavlyaetsya_po_tipu;
    property vhodit_kak_poz_rashoda: TRashod_rem_materialov read _Getvhodit_kak_poz_rashoda write _Setvhodit_kak_poz_rashoda;
  end;

  TRashod_rem_materialov = class(TBusinessClassesRoot)
  private
    function _Get_M_Operaciya: TBAString;
    function _GetOperaciya: String;
    function _Get_M_Stoimostj_vsei_raboty_: TBAFloat;
    function _GetStoimostj_vsei_raboty_: double;
    function _Get_M_Stroka_opisaniya: TBAString;
    function _GetStroka_opisaniya: String;
    function _Get_M_Stoimostj_materialov: TBAFloat;
    function _GetStoimostj_materialov: double;
    function _Get_M_Stoimostj_operacii: TBAFloat;
    function _GetStoimostj_operacii: double;
    procedure _SetStoimostj_operacii(const NewValue: double);
    function _GetRashoduetsya_dlya_remonta: TSostav_priemki_vydachi;
    function _Get_M_Rashoduetsya_dlya_remonta: TBoldObjectReference;
    procedure _SetRashoduetsya_dlya_remonta(const value: TSostav_priemki_vydachi);
    function _Getispoljzuet_deistvie: TOperaciya;
    function _Get_M_ispoljzuet_deistvie: TBoldObjectReference;
    procedure _Setispoljzuet_deistvie(const value: TOperaciya);
    function _Getvklyuch_pozicii_rashoda: TRashod_po_operaciiList;
  protected
  public
    property M_Operaciya: TBAString read _Get_M_Operaciya;
    property M_Stoimostj_vsei_raboty_: TBAFloat read _Get_M_Stoimostj_vsei_raboty_;
    property M_Stroka_opisaniya: TBAString read _Get_M_Stroka_opisaniya;
    property M_Stoimostj_materialov: TBAFloat read _Get_M_Stoimostj_materialov;
    property M_Stoimostj_operacii: TBAFloat read _Get_M_Stoimostj_operacii;
    property M_Rashoduetsya_dlya_remonta: TBoldObjectReference read _Get_M_Rashoduetsya_dlya_remonta;
    property M_ispoljzuet_deistvie: TBoldObjectReference read _Get_M_ispoljzuet_deistvie;
    property M_vklyuch_pozicii_rashoda: TRashod_po_operaciiList read _Getvklyuch_pozicii_rashoda;
    property Operaciya: String read _GetOperaciya;
    property Stoimostj_vsei_raboty_: double read _GetStoimostj_vsei_raboty_;
    property Stroka_opisaniya: String read _GetStroka_opisaniya;
    property Stoimostj_materialov: double read _GetStoimostj_materialov;
    property Stoimostj_operacii: double read _GetStoimostj_operacii write _SetStoimostj_operacii;
    property Rashoduetsya_dlya_remonta: TSostav_priemki_vydachi read _GetRashoduetsya_dlya_remonta write _SetRashoduetsya_dlya_remonta;
    property ispoljzuet_deistvie: TOperaciya read _Getispoljzuet_deistvie write _Setispoljzuet_deistvie;
    property vklyuch_pozicii_rashoda: TRashod_po_operaciiList read _Getvklyuch_pozicii_rashoda;
  end;

  TSostav_priemki_vydachi = class(TBusinessClassesRoot)
  private
    function _Get_M_Opisanie_neispravnosti: TBAString;
    function _GetOpisanie_neispravnosti: String;
    procedure _SetOpisanie_neispravnosti(const NewValue: String);
    function _Get_M_Izdelie: TBAString;
    function _GetIzdelie: String;
    function _Get_M_Seriinyi_nomer: TBAString;
    function _GetSeriinyi_nomer: String;
    procedure _SetSeriinyi_nomer(const NewValue: String);
    function _Get_M_Komplektnostj: TBAString;
    function _GetKomplektnostj: String;
    procedure _SetKomplektnostj(const NewValue: String);
    function _Get_M_Vydan: TBABoolean;
    function _GetVydan: Boolean;
    procedure _SetVydan(const NewValue: Boolean);
    function _Get_M_VydanChisl: TBAInteger;
    function _GetVydanChisl: Integer;
    function _Get_M_Nomer_akta_priyoma: TBAInteger;
    function _GetNomer_akta_priyoma: Integer;
    procedure _SetNomer_akta_priyoma(const NewValue: Integer);
    function _Get_M_Nomer_akta_vydachi: TBAInteger;
    function _GetNomer_akta_vydachi: Integer;
    procedure _SetNomer_akta_vydachi(const NewValue: Integer);
    function _Get_M_Vid_rabot: TBAString;
    function _GetVid_rabot: String;
    function _Get_M_Summa_rashodov_mater: TBAFloat;
    function _GetSumma_rashodov_mater: double;
    function _Get_M_Stoim_rabot: TBAFloat;
    function _GetStoim_rabot: double;
    function _Get_M_Raznica_raboty: TBAFloat;
    function _GetRaznica_raboty: double;
    function _Get_M_DataVydachi: TBADate;
    function _GetDataVydachi: TDate;
    procedure _SetDataVydachi(const NewValue: TDate);
    function _Get_M_OrientirStoim: TBAFloat;
    function _GetOrientirStoim: double;
    procedure _SetOrientirStoim(const NewValue: double);
    function _Get_M_MenedgerImya: TBAString;
    function _GetMenedgerImya: String;
    function _Get_M_NaimenOperac: TBAString;
    function _GetNaimenOperac: String;
    function _Get_M_ImyaTehnSpecialista: TBAString;
    function _GetImyaTehnSpecialista: String;
    function _Get_M_Stoim_operacii: TBAFloat;
    function _GetStoim_operacii: double;
    function _GetPozicii_uslug_dlya: TPriemka_vydacha;
    function _Get_M_Pozicii_uslug_dlya: TBoldObjectReference;
    procedure _SetPozicii_uslug_dlya(const value: TPriemka_vydacha);
    function _GetRemont_predpolagaet: TRashod_rem_materialovList;
    function _Getotnositsya_po_tipu: TTip_remontiruemogo_izdeliya;
    function _Get_M_otnositsya_po_tipu: TBoldObjectReference;
    procedure _Setotnositsya_po_tipu(const value: TTip_remontiruemogo_izdeliya);
    function _Getremontom_zanimaetsya: TSotrudnik_remont;
    function _Get_M_remontom_zanimaetsya: TBoldObjectReference;
    procedure _Setremontom_zanimaetsya(const value: TSotrudnik_remont);
    function _Getvypolnyaetsya_dlya_operacii: TTip_operacii;
    function _Get_M_vypolnyaetsya_dlya_operacii: TBoldObjectReference;
    procedure _Setvypolnyaetsya_dlya_operacii(const value: TTip_operacii);
  protected
  public
    property M_Opisanie_neispravnosti: TBAString read _Get_M_Opisanie_neispravnosti;
    property M_Izdelie: TBAString read _Get_M_Izdelie;
    property M_Seriinyi_nomer: TBAString read _Get_M_Seriinyi_nomer;
    property M_Komplektnostj: TBAString read _Get_M_Komplektnostj;
    property M_Vydan: TBABoolean read _Get_M_Vydan;
    property M_VydanChisl: TBAInteger read _Get_M_VydanChisl;
    property M_Nomer_akta_priyoma: TBAInteger read _Get_M_Nomer_akta_priyoma;
    property M_Nomer_akta_vydachi: TBAInteger read _Get_M_Nomer_akta_vydachi;
    property M_Vid_rabot: TBAString read _Get_M_Vid_rabot;
    property M_Summa_rashodov_mater: TBAFloat read _Get_M_Summa_rashodov_mater;
    property M_Stoim_rabot: TBAFloat read _Get_M_Stoim_rabot;
    property M_Raznica_raboty: TBAFloat read _Get_M_Raznica_raboty;
    property M_DataVydachi: TBADate read _Get_M_DataVydachi;
    property M_OrientirStoim: TBAFloat read _Get_M_OrientirStoim;
    property M_MenedgerImya: TBAString read _Get_M_MenedgerImya;
    property M_NaimenOperac: TBAString read _Get_M_NaimenOperac;
    property M_ImyaTehnSpecialista: TBAString read _Get_M_ImyaTehnSpecialista;
    property M_Stoim_operacii: TBAFloat read _Get_M_Stoim_operacii;
    property M_Pozicii_uslug_dlya: TBoldObjectReference read _Get_M_Pozicii_uslug_dlya;
    property M_Remont_predpolagaet: TRashod_rem_materialovList read _GetRemont_predpolagaet;
    property M_otnositsya_po_tipu: TBoldObjectReference read _Get_M_otnositsya_po_tipu;
    property M_remontom_zanimaetsya: TBoldObjectReference read _Get_M_remontom_zanimaetsya;
    property M_vypolnyaetsya_dlya_operacii: TBoldObjectReference read _Get_M_vypolnyaetsya_dlya_operacii;
    property Opisanie_neispravnosti: String read _GetOpisanie_neispravnosti write _SetOpisanie_neispravnosti;
    property Izdelie: String read _GetIzdelie;
    property Seriinyi_nomer: String read _GetSeriinyi_nomer write _SetSeriinyi_nomer;
    property Komplektnostj: String read _GetKomplektnostj write _SetKomplektnostj;
    property Vydan: Boolean read _GetVydan write _SetVydan;
    property VydanChisl: Integer read _GetVydanChisl;
    property Nomer_akta_priyoma: Integer read _GetNomer_akta_priyoma write _SetNomer_akta_priyoma;
    property Nomer_akta_vydachi: Integer read _GetNomer_akta_vydachi write _SetNomer_akta_vydachi;
    property Vid_rabot: String read _GetVid_rabot;
    property Summa_rashodov_mater: double read _GetSumma_rashodov_mater;
    property Stoim_rabot: double read _GetStoim_rabot;
    property Raznica_raboty: double read _GetRaznica_raboty;
    property DataVydachi: TDate read _GetDataVydachi write _SetDataVydachi;
    property OrientirStoim: double read _GetOrientirStoim write _SetOrientirStoim;
    property MenedgerImya: String read _GetMenedgerImya;
    property NaimenOperac: String read _GetNaimenOperac;
    property ImyaTehnSpecialista: String read _GetImyaTehnSpecialista;
    property Stoim_operacii: double read _GetStoim_operacii;
    property Pozicii_uslug_dlya: TPriemka_vydacha read _GetPozicii_uslug_dlya write _SetPozicii_uslug_dlya;
    property Remont_predpolagaet: TRashod_rem_materialovList read _GetRemont_predpolagaet;
    property otnositsya_po_tipu: TTip_remontiruemogo_izdeliya read _Getotnositsya_po_tipu write _Setotnositsya_po_tipu;
    property remontom_zanimaetsya: TSotrudnik_remont read _Getremontom_zanimaetsya write _Setremontom_zanimaetsya;
    property vypolnyaetsya_dlya_operacii: TTip_operacii read _Getvypolnyaetsya_dlya_operacii write _Setvypolnyaetsya_dlya_operacii;
  end;

  TSpravochnik = class(TBusinessClassesRoot)
  private
    function _Get_M_Naimenovanie: TBAString;
    function _GetNaimenovanie: String;
    procedure _SetNaimenovanie(const NewValue: String);
    function _Get_M_Identifikator: TBAInteger;
    function _GetIdentifikator: Integer;
    procedure _SetIdentifikator(const NewValue: Integer);
    function _Get_M_Kommentarii: TBAString;
    function _GetKommentarii: String;
    procedure _SetKommentarii(const NewValue: String);
  protected
  public
    property M_Naimenovanie: TBAString read _Get_M_Naimenovanie;
    property M_Identifikator: TBAInteger read _Get_M_Identifikator;
    property M_Kommentarii: TBAString read _Get_M_Kommentarii;
    property Naimenovanie: String read _GetNaimenovanie write _SetNaimenovanie;
    property Identifikator: Integer read _GetIdentifikator write _SetIdentifikator;
    property Kommentarii: String read _GetKommentarii write _SetKommentarii;
  end;

  TTekushie_znacheniya = class(TBusinessClassesRoot)
  private
    function _Get_M_Tek_akt_priyoma: TBAInteger;
    function _GetTek_akt_priyoma: Integer;
    procedure _SetTek_akt_priyoma(const NewValue: Integer);
    function _Get_M_Tek_akt_vydachi: TBAInteger;
    function _GetTek_akt_vydachi: Integer;
    procedure _SetTek_akt_vydachi(const NewValue: Integer);
    function _Get_M_Tek_schyot: TBAInteger;
    function _GetTek_schyot: Integer;
    procedure _SetTek_schyot(const NewValue: Integer);
    function _Get_M_Startovaya_data_uch: TBADate;
    function _GetStartovaya_data_uch: TDate;
    procedure _SetStartovaya_data_uch(const NewValue: TDate);
    function _Get_M_Konechn_data_uch: TBADate;
    function _GetKonechn_data_uch: TDate;
    procedure _SetKonechn_data_uch(const NewValue: TDate);
  protected
  public
    property M_Tek_akt_priyoma: TBAInteger read _Get_M_Tek_akt_priyoma;
    property M_Tek_akt_vydachi: TBAInteger read _Get_M_Tek_akt_vydachi;
    property M_Tek_schyot: TBAInteger read _Get_M_Tek_schyot;
    property M_Startovaya_data_uch: TBADate read _Get_M_Startovaya_data_uch;
    property M_Konechn_data_uch: TBADate read _Get_M_Konechn_data_uch;
    property Tek_akt_priyoma: Integer read _GetTek_akt_priyoma write _SetTek_akt_priyoma;
    property Tek_akt_vydachi: Integer read _GetTek_akt_vydachi write _SetTek_akt_vydachi;
    property Tek_schyot: Integer read _GetTek_schyot write _SetTek_schyot;
    property Startovaya_data_uch: TDate read _GetStartovaya_data_uch write _SetStartovaya_data_uch;
    property Konechn_data_uch: TDate read _GetKonechn_data_uch write _SetKonechn_data_uch;
  end;

  TPoljzovatelj = class(TPersona)
  private
    function _Get_M_Login: TBAString;
    function _GetLogin: String;
    procedure _SetLogin(const NewValue: String);
    function _Get_M_Parolj: TBAString;
    function _GetParolj: String;
    procedure _SetParolj(const NewValue: String);
    function _Get_M_Prava: TBAInteger;
    function _GetPrava: Integer;
    procedure _SetPrava(const NewValue: Integer);
  protected
  public
    property M_Login: TBAString read _Get_M_Login;
    property M_Parolj: TBAString read _Get_M_Parolj;
    property M_Prava: TBAInteger read _Get_M_Prava;
    property Login: String read _GetLogin write _SetLogin;
    property Parolj: String read _GetParolj write _SetParolj;
    property Prava: Integer read _GetPrava write _SetPrava;
  end;

  TSotrudnik_remont = class(TPersona)
  private
    function _Get_M_VseFlag: TBABoolean;
    function _GetVseFlag: Boolean;
    procedure _SetVseFlag(const NewValue: Boolean);
    function _Gettehnik_zanimaetsya: TSostav_priemki_vydachiList;
    function _Getsotrudnik_nahoditsya_na: TDolgnostj;
    function _Get_M_sotrudnik_nahoditsya_na: TBoldObjectReference;
    procedure _Setsotrudnik_nahoditsya_na(const value: TDolgnostj);
    function _Getkak_menedger_osush: TPriemka_vydachaList;
  protected
  public
    property M_VseFlag: TBABoolean read _Get_M_VseFlag;
    property M_tehnik_zanimaetsya: TSostav_priemki_vydachiList read _Gettehnik_zanimaetsya;
    property M_sotrudnik_nahoditsya_na: TBoldObjectReference read _Get_M_sotrudnik_nahoditsya_na;
    property M_kak_menedger_osush: TPriemka_vydachaList read _Getkak_menedger_osush;
    property VseFlag: Boolean read _GetVseFlag write _SetVseFlag;
    property tehnik_zanimaetsya: TSostav_priemki_vydachiList read _Gettehnik_zanimaetsya;
    property sotrudnik_nahoditsya_na: TDolgnostj read _Getsotrudnik_nahoditsya_na write _Setsotrudnik_nahoditsya_na;
    property kak_menedger_osush: TPriemka_vydachaList read _Getkak_menedger_osush;
  end;

  TChastnoe_lico = class(TPersona)
  private
    function _Getfiz_klient_dlya_uslugi: TPriemka_vydachaList;
  protected
  public
    property M_fiz_klient_dlya_uslugi: TPriemka_vydachaList read _Getfiz_klient_dlya_uslugi;
    property fiz_klient_dlya_uslugi: TPriemka_vydachaList read _Getfiz_klient_dlya_uslugi;
  end;

  TYuridich_lico = class(TPersona)
  private
    function _Getyur_klient_uslugi: TPriemka_vydachaList;
    function _Getoplachivaetsya: TPriemka_vydachaList;
  protected
  public
    property M_yur_klient_uslugi: TPriemka_vydachaList read _Getyur_klient_uslugi;
    property M_oplachivaetsya: TPriemka_vydachaList read _Getoplachivaetsya;
    property yur_klient_uslugi: TPriemka_vydachaList read _Getyur_klient_uslugi;
    property oplachivaetsya: TPriemka_vydachaList read _Getoplachivaetsya;
  end;

  TDolgnostj = class(TSpravochnik)
  private
    function _Getdolgnostj_prinadlegit: TSotrudnik_remontList;
  protected
  public
    property M_dolgnostj_prinadlegit: TSotrudnik_remontList read _Getdolgnostj_prinadlegit;
    property dolgnostj_prinadlegit: TSotrudnik_remontList read _Getdolgnostj_prinadlegit;
  end;

  TOperaciya = class(TSpravochnik)
  private
    function _Get_M_Stoimostj: TBAString;
    function _GetStoimostj: String;
    procedure _SetStoimostj(const NewValue: String);
    function _Getproizvoditsya_kak_etap: TRashod_rem_materialovList;
  protected
  public
    property M_Stoimostj: TBAString read _Get_M_Stoimostj;
    property M_proizvoditsya_kak_etap: TRashod_rem_materialovList read _Getproizvoditsya_kak_etap;
    property Stoimostj: String read _GetStoimostj write _SetStoimostj;
    property proizvoditsya_kak_etap: TRashod_rem_materialovList read _Getproizvoditsya_kak_etap;
  end;

  TTip_operacii = class(TSpravochnik)
  private
    function _Get_M_VseFlag: TBABoolean;
    function _GetVseFlag: Boolean;
    procedure _SetVseFlag(const NewValue: Boolean);
    function _Gettip_oper_imeet: TSostav_priemki_vydachiList;
  protected
  public
    property M_VseFlag: TBABoolean read _Get_M_VseFlag;
    property M_tip_oper_imeet: TSostav_priemki_vydachiList read _Gettip_oper_imeet;
    property VseFlag: Boolean read _GetVseFlag write _SetVseFlag;
    property tip_oper_imeet: TSostav_priemki_vydachiList read _Gettip_oper_imeet;
  end;

  TTip_remontiruemogo_izdeliya = class(TSpravochnik)
  private
    function _Get_M_PunktNovyi: TBABoolean;
    function _GetPunktNovyi: Boolean;
    procedure _SetPunktNovyi(const NewValue: Boolean);
    function _Getopredelyaet_tip_dlya: TSostav_priemki_vydachiList;
  protected
  public
    property M_PunktNovyi: TBABoolean read _Get_M_PunktNovyi;
    property M_opredelyaet_tip_dlya: TSostav_priemki_vydachiList read _Getopredelyaet_tip_dlya;
    property PunktNovyi: Boolean read _GetPunktNovyi write _SetPunktNovyi;
    property opredelyaet_tip_dlya: TSostav_priemki_vydachiList read _Getopredelyaet_tip_dlya;
  end;

  TTip_tovara = class(TSpravochnik)
  private
    function _Get_M_VseFlag: TBABoolean;
    function _GetVseFlag: Boolean;
    procedure _SetVseFlag(const NewValue: Boolean);
    function _Getimeet_rashod: TRashod_po_operaciiList;
  protected
  public
    property M_VseFlag: TBABoolean read _Get_M_VseFlag;
    property M_imeet_rashod: TRashod_po_operaciiList read _Getimeet_rashod;
    property VseFlag: Boolean read _GetVseFlag write _SetVseFlag;
    property imeet_rashod: TRashod_po_operaciiList read _Getimeet_rashod;
  end;

  TBusinessClassesRootList = class(TBoldObjectList)
  protected
    function GetBoldObject(index: Integer): TBusinessClassesRoot;
    procedure SetBoldObject(index: Integer; NewObject: TBusinessClassesRoot);
  public
    function Includes(anObject: TBusinessClassesRoot): Boolean;
    function IndexOf(anObject: TBusinessClassesRoot): Integer;
    procedure Add(NewObject: TBusinessClassesRoot);
    function AddNew: TBusinessClassesRoot;
    procedure Insert(index: Integer; NewObject: TBusinessClassesRoot);
    property BoldObjects[index: Integer]: TBusinessClassesRoot read GetBoldObject write SetBoldObject; default;
  end;

  TPersonaList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TPersona;
    procedure SetBoldObject(index: Integer; NewObject: TPersona);
  public
    function Includes(anObject: TPersona): Boolean;
    function IndexOf(anObject: TPersona): Integer;
    procedure Add(NewObject: TPersona);
    function AddNew: TPersona;
    procedure Insert(index: Integer; NewObject: TPersona);
    property BoldObjects[index: Integer]: TPersona read GetBoldObject write SetBoldObject; default;
  end;

  TPriemka_vydachaList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TPriemka_vydacha;
    procedure SetBoldObject(index: Integer; NewObject: TPriemka_vydacha);
  public
    function Includes(anObject: TPriemka_vydacha): Boolean;
    function IndexOf(anObject: TPriemka_vydacha): Integer;
    procedure Add(NewObject: TPriemka_vydacha);
    function AddNew: TPriemka_vydacha;
    procedure Insert(index: Integer; NewObject: TPriemka_vydacha);
    property BoldObjects[index: Integer]: TPriemka_vydacha read GetBoldObject write SetBoldObject; default;
  end;

  TRashod_po_operaciiList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TRashod_po_operacii;
    procedure SetBoldObject(index: Integer; NewObject: TRashod_po_operacii);
  public
    function Includes(anObject: TRashod_po_operacii): Boolean;
    function IndexOf(anObject: TRashod_po_operacii): Integer;
    procedure Add(NewObject: TRashod_po_operacii);
    function AddNew: TRashod_po_operacii;
    procedure Insert(index: Integer; NewObject: TRashod_po_operacii);
    property BoldObjects[index: Integer]: TRashod_po_operacii read GetBoldObject write SetBoldObject; default;
  end;

  TRashod_rem_materialovList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TRashod_rem_materialov;
    procedure SetBoldObject(index: Integer; NewObject: TRashod_rem_materialov);
  public
    function Includes(anObject: TRashod_rem_materialov): Boolean;
    function IndexOf(anObject: TRashod_rem_materialov): Integer;
    procedure Add(NewObject: TRashod_rem_materialov);
    function AddNew: TRashod_rem_materialov;
    procedure Insert(index: Integer; NewObject: TRashod_rem_materialov);
    property BoldObjects[index: Integer]: TRashod_rem_materialov read GetBoldObject write SetBoldObject; default;
  end;

  TSostav_priemki_vydachiList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TSostav_priemki_vydachi;
    procedure SetBoldObject(index: Integer; NewObject: TSostav_priemki_vydachi);
  public
    function Includes(anObject: TSostav_priemki_vydachi): Boolean;
    function IndexOf(anObject: TSostav_priemki_vydachi): Integer;
    procedure Add(NewObject: TSostav_priemki_vydachi);
    function AddNew: TSostav_priemki_vydachi;
    procedure Insert(index: Integer; NewObject: TSostav_priemki_vydachi);
    property BoldObjects[index: Integer]: TSostav_priemki_vydachi read GetBoldObject write SetBoldObject; default;
  end;

  TSpravochnikList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TSpravochnik;
    procedure SetBoldObject(index: Integer; NewObject: TSpravochnik);
  public
    function Includes(anObject: TSpravochnik): Boolean;
    function IndexOf(anObject: TSpravochnik): Integer;
    procedure Add(NewObject: TSpravochnik);
    function AddNew: TSpravochnik;
    procedure Insert(index: Integer; NewObject: TSpravochnik);
    property BoldObjects[index: Integer]: TSpravochnik read GetBoldObject write SetBoldObject; default;
  end;

  TTekushie_znacheniyaList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TTekushie_znacheniya;
    procedure SetBoldObject(index: Integer; NewObject: TTekushie_znacheniya);
  public
    function Includes(anObject: TTekushie_znacheniya): Boolean;
    function IndexOf(anObject: TTekushie_znacheniya): Integer;
    procedure Add(NewObject: TTekushie_znacheniya);
    function AddNew: TTekushie_znacheniya;
    procedure Insert(index: Integer; NewObject: TTekushie_znacheniya);
    property BoldObjects[index: Integer]: TTekushie_znacheniya read GetBoldObject write SetBoldObject; default;
  end;

  TPoljzovateljList = class(TPersonaList)
  protected
    function GetBoldObject(index: Integer): TPoljzovatelj;
    procedure SetBoldObject(index: Integer; NewObject: TPoljzovatelj);
  public
    function Includes(anObject: TPoljzovatelj): Boolean;
    function IndexOf(anObject: TPoljzovatelj): Integer;
    procedure Add(NewObject: TPoljzovatelj);
    function AddNew: TPoljzovatelj;
    procedure Insert(index: Integer; NewObject: TPoljzovatelj);
    property BoldObjects[index: Integer]: TPoljzovatelj read GetBoldObject write SetBoldObject; default;
  end;

  TSotrudnik_remontList = class(TPersonaList)
  protected
    function GetBoldObject(index: Integer): TSotrudnik_remont;
    procedure SetBoldObject(index: Integer; NewObject: TSotrudnik_remont);
  public
    function Includes(anObject: TSotrudnik_remont): Boolean;
    function IndexOf(anObject: TSotrudnik_remont): Integer;
    procedure Add(NewObject: TSotrudnik_remont);
    function AddNew: TSotrudnik_remont;
    procedure Insert(index: Integer; NewObject: TSotrudnik_remont);
    property BoldObjects[index: Integer]: TSotrudnik_remont read GetBoldObject write SetBoldObject; default;
  end;

  TChastnoe_licoList = class(TPersonaList)
  protected
    function GetBoldObject(index: Integer): TChastnoe_lico;
    procedure SetBoldObject(index: Integer; NewObject: TChastnoe_lico);
  public
    function Includes(anObject: TChastnoe_lico): Boolean;
    function IndexOf(anObject: TChastnoe_lico): Integer;
    procedure Add(NewObject: TChastnoe_lico);
    function AddNew: TChastnoe_lico;
    procedure Insert(index: Integer; NewObject: TChastnoe_lico);
    property BoldObjects[index: Integer]: TChastnoe_lico read GetBoldObject write SetBoldObject; default;
  end;

  TYuridich_licoList = class(TPersonaList)
  protected
    function GetBoldObject(index: Integer): TYuridich_lico;
    procedure SetBoldObject(index: Integer; NewObject: TYuridich_lico);
  public
    function Includes(anObject: TYuridich_lico): Boolean;
    function IndexOf(anObject: TYuridich_lico): Integer;
    procedure Add(NewObject: TYuridich_lico);
    function AddNew: TYuridich_lico;
    procedure Insert(index: Integer; NewObject: TYuridich_lico);
    property BoldObjects[index: Integer]: TYuridich_lico read GetBoldObject write SetBoldObject; default;
  end;

  TDolgnostjList = class(TSpravochnikList)
  protected
    function GetBoldObject(index: Integer): TDolgnostj;
    procedure SetBoldObject(index: Integer; NewObject: TDolgnostj);
  public
    function Includes(anObject: TDolgnostj): Boolean;
    function IndexOf(anObject: TDolgnostj): Integer;
    procedure Add(NewObject: TDolgnostj);
    function AddNew: TDolgnostj;
    procedure Insert(index: Integer; NewObject: TDolgnostj);
    property BoldObjects[index: Integer]: TDolgnostj read GetBoldObject write SetBoldObject; default;
  end;

  TOperaciyaList = class(TSpravochnikList)
  protected
    function GetBoldObject(index: Integer): TOperaciya;
    procedure SetBoldObject(index: Integer; NewObject: TOperaciya);
  public
    function Includes(anObject: TOperaciya): Boolean;
    function IndexOf(anObject: TOperaciya): Integer;
    procedure Add(NewObject: TOperaciya);
    function AddNew: TOperaciya;
    procedure Insert(index: Integer; NewObject: TOperaciya);
    property BoldObjects[index: Integer]: TOperaciya read GetBoldObject write SetBoldObject; default;
  end;

  TTip_operaciiList = class(TSpravochnikList)
  protected
    function GetBoldObject(index: Integer): TTip_operacii;
    procedure SetBoldObject(index: Integer; NewObject: TTip_operacii);
  public
    function Includes(anObject: TTip_operacii): Boolean;
    function IndexOf(anObject: TTip_operacii): Integer;
    procedure Add(NewObject: TTip_operacii);
    function AddNew: TTip_operacii;
    procedure Insert(index: Integer; NewObject: TTip_operacii);
    property BoldObjects[index: Integer]: TTip_operacii read GetBoldObject write SetBoldObject; default;
  end;

  TTip_remontiruemogo_izdeliyaList = class(TSpravochnikList)
  protected
    function GetBoldObject(index: Integer): TTip_remontiruemogo_izdeliya;
    procedure SetBoldObject(index: Integer; NewObject: TTip_remontiruemogo_izdeliya);
  public
    function Includes(anObject: TTip_remontiruemogo_izdeliya): Boolean;
    function IndexOf(anObject: TTip_remontiruemogo_izdeliya): Integer;
    procedure Add(NewObject: TTip_remontiruemogo_izdeliya);
    function AddNew: TTip_remontiruemogo_izdeliya;
    procedure Insert(index: Integer; NewObject: TTip_remontiruemogo_izdeliya);
    property BoldObjects[index: Integer]: TTip_remontiruemogo_izdeliya read GetBoldObject write SetBoldObject; default;
  end;

  TTip_tovaraList = class(TSpravochnikList)
  protected
    function GetBoldObject(index: Integer): TTip_tovara;
    procedure SetBoldObject(index: Integer; NewObject: TTip_tovara);
  public
    function Includes(anObject: TTip_tovara): Boolean;
    function IndexOf(anObject: TTip_tovara): Integer;
    procedure Add(NewObject: TTip_tovara);
    function AddNew: TTip_tovara;
    procedure Insert(index: Integer; NewObject: TTip_tovara);
    property BoldObjects[index: Integer]: TTip_tovara read GetBoldObject write SetBoldObject; default;
  end;

function GeneratedCodeCRC: String;

implementation

uses
  // implementation uses
  // implementation dependencies
  // other
  BoldGeneratedCodeDictionary;

{$ENDIF}

