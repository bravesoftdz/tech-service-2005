(************************************)
(*    This file is autogenerated    *)
(* Any manual changes will be LOST! *)
(************************************)

(* This file should be stored in the same directory    *)
(* as the form/datamodule with the corresponding model *)

// 

{ File generated 04.01.2006 20:33:05 }

unit BusinessClasses_PersistenceInterfaces;

interface

uses
  // interface uses
  // interface dependencies
  // other
  BoldValueInterfaces,
  BoldValueSpaceInterfaces,
  BoldMeta,
  BoldId,
  BoldExternalPersistenceSupport;

type
  IPersistentBusinessClassesRoot = interface;
  IPersistentPersona = interface;
  IPersistentRashod_rem_materialov = interface;
  IPersistentSostav_priemki_vydachi = interface;
  IPersistentSpravochnik = interface;
  IPersistentSotrudnik_menedger = interface;
  IPersistentSotrudnik_remont = interface;
  IPersistentChastnoe_lico = interface;
  IPersistentYuridich_lico = interface;
  IPersistentTip_operacii = interface;
  IPersistentTip_remontiruemogo_izdeliya = interface;
  IPersistentTip_tovara = interface;
  IPersistentPriemka_vydacha = interface;

  TBusinessClassesRootPersistenceAdapter = class;
  TPersonaPersistenceAdapter = class;
  TRashod_rem_materialovPersistenceAdapter = class;
  TSostav_priemki_vydachiPersistenceAdapter = class;
  TSpravochnikPersistenceAdapter = class;
  TSotrudnik_menedgerPersistenceAdapter = class;
  TSotrudnik_remontPersistenceAdapter = class;
  TChastnoe_licoPersistenceAdapter = class;
  TYuridich_licoPersistenceAdapter = class;
  TTip_operaciiPersistenceAdapter = class;
  TTip_remontiruemogo_izdeliyaPersistenceAdapter = class;
  TTip_tovaraPersistenceAdapter = class;
  TPriemka_vydachaPersistenceAdapter = class;

  IPersistentBusinessClassesRoot = interface(IPersistentBoldObject)
  ['{AAE16398-C851-4FD7-8DDA-33DED793DF03}']  

  end;

  IPersistentPersona = interface(IPersistentBusinessClassesRoot)
  ['{4B50792E-C272-4F85-BD66-2EED17F60690}']  
    function Get_M_Familiya: IBoldStringContent;
    function Get_Familiya: String;
    procedure Set_Familiya(NewValue: String);

    function Get_M_Imya: IBoldStringContent;
    function Get_Imya: String;
    procedure Set_Imya(NewValue: String);

    function Get_M_Otchestvo: IBoldStringContent;
    function Get_Otchestvo: String;
    procedure Set_Otchestvo(NewValue: String);

    function Get_M_Ulica: IBoldStringContent;
    function Get_Ulica: String;
    procedure Set_Ulica(NewValue: String);

    function Get_M_Dom: IBoldIntegerContent;
    function Get_Dom: integer;
    procedure Set_Dom(NewValue: integer);

    function Get_M_Kvartira: IBoldIntegerContent;
    function Get_Kvartira: integer;
    procedure Set_Kvartira(NewValue: integer);

    function Get_M_Korpus: IBoldIntegerContent;
    function Get_Korpus: integer;
    procedure Set_Korpus(NewValue: integer);

    function Get_M_Mobiljnyi_telefon: IBoldStringContent;
    function Get_Mobiljnyi_telefon: String;
    procedure Set_Mobiljnyi_telefon(NewValue: String);

    function Get_M_Rabochii_telefon: IBoldStringContent;
    function Get_Rabochii_telefon: String;
    procedure Set_Rabochii_telefon(NewValue: String);

    function Get_M_Domashnii_telefon: IBoldStringContent;
    function Get_Domashnii_telefon: String;
    procedure Set_Domashnii_telefon(NewValue: String);

    function Get_M_Elektronnyi_adres: IBoldStringContent;
    function Get_Elektronnyi_adres: String;
    procedure Set_Elektronnyi_adres(NewValue: String);


    property M_Familiya: IBoldStringContent read Get_M_Familiya;
    property Familiya: String read Get_Familiya write Set_Familiya;

    property M_Imya: IBoldStringContent read Get_M_Imya;
    property Imya: String read Get_Imya write Set_Imya;

    property M_Otchestvo: IBoldStringContent read Get_M_Otchestvo;
    property Otchestvo: String read Get_Otchestvo write Set_Otchestvo;

    property M_Ulica: IBoldStringContent read Get_M_Ulica;
    property Ulica: String read Get_Ulica write Set_Ulica;

    property M_Dom: IBoldIntegerContent read Get_M_Dom;
    property Dom: integer read Get_Dom write Set_Dom;

    property M_Kvartira: IBoldIntegerContent read Get_M_Kvartira;
    property Kvartira: integer read Get_Kvartira write Set_Kvartira;

    property M_Korpus: IBoldIntegerContent read Get_M_Korpus;
    property Korpus: integer read Get_Korpus write Set_Korpus;

    property M_Mobiljnyi_telefon: IBoldStringContent read Get_M_Mobiljnyi_telefon;
    property Mobiljnyi_telefon: String read Get_Mobiljnyi_telefon write Set_Mobiljnyi_telefon;

    property M_Rabochii_telefon: IBoldStringContent read Get_M_Rabochii_telefon;
    property Rabochii_telefon: String read Get_Rabochii_telefon write Set_Rabochii_telefon;

    property M_Domashnii_telefon: IBoldStringContent read Get_M_Domashnii_telefon;
    property Domashnii_telefon: String read Get_Domashnii_telefon write Set_Domashnii_telefon;

    property M_Elektronnyi_adres: IBoldStringContent read Get_M_Elektronnyi_adres;
    property Elektronnyi_adres: String read Get_Elektronnyi_adres write Set_Elektronnyi_adres;

  end;

  IPersistentRashod_rem_materialov = interface(IPersistentBusinessClassesRoot)
  ['{67711898-E786-4E38-A34C-504C68E445A9}']  
    function Get_M_Kolichestvo: IBoldIntegerContent;
    function Get_Kolichestvo: integer;
    procedure Set_Kolichestvo(NewValue: integer);

    function Get_M_Stoimostj: IBoldFloatContent;
    function Get_Stoimostj: double;
    procedure Set_Stoimostj(NewValue: double);

    function Get_M_yavlyaetsya_po_tipu: IBoldObjectIdRef;
    function Get_yavlyaetsya_po_tipu: IPersistentTip_tovara;
    procedure Set_yavlyaetsya_po_tipu(const NewValue: IPersistentTip_tovara);
    function Get_yavlyaetsya_po_tipu_Type: TMoldClass;
    function Get_M_Rashoduetsya_dlya_remonta: IBoldObjectIdRef;
    function Get_Rashoduetsya_dlya_remonta: IPersistentSostav_priemki_vydachi;
    procedure Set_Rashoduetsya_dlya_remonta(const NewValue: IPersistentSostav_priemki_vydachi);
    function Get_Rashoduetsya_dlya_remonta_Type: TMoldClass;

    property M_Kolichestvo: IBoldIntegerContent read Get_M_Kolichestvo;
    property Kolichestvo: integer read Get_Kolichestvo write Set_Kolichestvo;

    property M_Stoimostj: IBoldFloatContent read Get_M_Stoimostj;
    property Stoimostj: double read Get_Stoimostj write Set_Stoimostj;

    property M_yavlyaetsya_po_tipu: IBoldObjectIdRef read Get_M_yavlyaetsya_po_tipu;
    property yavlyaetsya_po_tipu: IPersistentTip_tovara read Get_yavlyaetsya_po_tipu write Set_yavlyaetsya_po_tipu;
    property yavlyaetsya_po_tipu_Type: TMoldClass read Get_yavlyaetsya_po_tipu_Type;
    property M_Rashoduetsya_dlya_remonta: IBoldObjectIdRef read Get_M_Rashoduetsya_dlya_remonta;
    property Rashoduetsya_dlya_remonta: IPersistentSostav_priemki_vydachi read Get_Rashoduetsya_dlya_remonta write Set_Rashoduetsya_dlya_remonta;
    property Rashoduetsya_dlya_remonta_Type: TMoldClass read Get_Rashoduetsya_dlya_remonta_Type;
  end;

  IPersistentSostav_priemki_vydachi = interface(IPersistentBusinessClassesRoot)
  ['{F0A62886-8471-4319-82ED-9F3E4A4D37F4}']  
    function Get_M_Pozicii_uslug_dlya: IBoldObjectIdRef;
    function Get_Pozicii_uslug_dlya: IPersistentPriemka_vydacha;
    procedure Set_Pozicii_uslug_dlya(const NewValue: IPersistentPriemka_vydacha);
    function Get_Pozicii_uslug_dlya_Type: TMoldClass;
    function Get_Remont_predpolagaet: IBoldObjectIdListRef;
    function Get_Remont_predpolagaet_Type: TMoldClass;
    function Get_M_otnositsya_po_tipu: IBoldObjectIdRef;
    function Get_otnositsya_po_tipu: IPersistentTip_remontiruemogo_izdeliya;
    procedure Set_otnositsya_po_tipu(const NewValue: IPersistentTip_remontiruemogo_izdeliya);
    function Get_otnositsya_po_tipu_Type: TMoldClass;

    property M_Pozicii_uslug_dlya: IBoldObjectIdRef read Get_M_Pozicii_uslug_dlya;
    property Pozicii_uslug_dlya: IPersistentPriemka_vydacha read Get_Pozicii_uslug_dlya write Set_Pozicii_uslug_dlya;
    property Pozicii_uslug_dlya_Type: TMoldClass read Get_Pozicii_uslug_dlya_Type;
    property Remont_predpolagaet: IBoldObjectIdListRef read Get_Remont_predpolagaet;
    property Remont_predpolagaet_Type: TMoldClass read Get_Remont_predpolagaet_Type;
    property M_otnositsya_po_tipu: IBoldObjectIdRef read Get_M_otnositsya_po_tipu;
    property otnositsya_po_tipu: IPersistentTip_remontiruemogo_izdeliya read Get_otnositsya_po_tipu write Set_otnositsya_po_tipu;
    property otnositsya_po_tipu_Type: TMoldClass read Get_otnositsya_po_tipu_Type;
  end;

  IPersistentSpravochnik = interface(IPersistentBusinessClassesRoot)
  ['{7CCBE8DC-BB87-4F22-B1C8-04E1A317BF97}']  
    function Get_M_Naimenovanie: IBoldStringContent;
    function Get_Naimenovanie: String;
    procedure Set_Naimenovanie(NewValue: String);

    function Get_M_Identifikator: IBoldIntegerContent;
    function Get_Identifikator: integer;
    procedure Set_Identifikator(NewValue: integer);

    function Get_M_Kommentarii: IBoldStringContent;
    function Get_Kommentarii: String;
    procedure Set_Kommentarii(NewValue: String);


    property M_Naimenovanie: IBoldStringContent read Get_M_Naimenovanie;
    property Naimenovanie: String read Get_Naimenovanie write Set_Naimenovanie;

    property M_Identifikator: IBoldIntegerContent read Get_M_Identifikator;
    property Identifikator: integer read Get_Identifikator write Set_Identifikator;

    property M_Kommentarii: IBoldStringContent read Get_M_Kommentarii;
    property Kommentarii: String read Get_Kommentarii write Set_Kommentarii;

  end;

  IPersistentSotrudnik_menedger = interface(IPersistentPersona)
  ['{2F913149-65AE-40B3-8FE4-6E14C5A5EEAD}']  
    function Get_menedger_osush: IBoldObjectIdListRef;
    function Get_menedger_osush_Type: TMoldClass;

    property menedger_osush: IBoldObjectIdListRef read Get_menedger_osush;
    property menedger_osush_Type: TMoldClass read Get_menedger_osush_Type;
  end;

  IPersistentSotrudnik_remont = interface(IPersistentPersona)
  ['{84E6339E-27DA-44C3-B81D-63E492701E48}']  
    function Get_tehn_sotr_zanimaetsya: IBoldObjectIdListRef;
    function Get_tehn_sotr_zanimaetsya_Type: TMoldClass;

    property tehn_sotr_zanimaetsya: IBoldObjectIdListRef read Get_tehn_sotr_zanimaetsya;
    property tehn_sotr_zanimaetsya_Type: TMoldClass read Get_tehn_sotr_zanimaetsya_Type;
  end;

  IPersistentChastnoe_lico = interface(IPersistentPersona)
  ['{E2BFD54C-7167-4A68-A0DF-6E0CBAC463B5}']  
    function Get_fiz_klient_dlya_uslugi: IBoldObjectIdListRef;
    function Get_fiz_klient_dlya_uslugi_Type: TMoldClass;

    property fiz_klient_dlya_uslugi: IBoldObjectIdListRef read Get_fiz_klient_dlya_uslugi;
    property fiz_klient_dlya_uslugi_Type: TMoldClass read Get_fiz_klient_dlya_uslugi_Type;
  end;

  IPersistentYuridich_lico = interface(IPersistentPersona)
  ['{F8591FB2-A39E-40B9-B27A-0A133746A9ED}']  
    function Get_M_BIK: IBoldStringContent;
    function Get_BIK: String;
    procedure Set_BIK(NewValue: String);

    function Get_yur_klient_uslugi: IBoldObjectIdListRef;
    function Get_yur_klient_uslugi_Type: TMoldClass;

    property M_BIK: IBoldStringContent read Get_M_BIK;
    property BIK: String read Get_BIK write Set_BIK;

    property yur_klient_uslugi: IBoldObjectIdListRef read Get_yur_klient_uslugi;
    property yur_klient_uslugi_Type: TMoldClass read Get_yur_klient_uslugi_Type;
  end;

  IPersistentTip_operacii = interface(IPersistentSpravochnik)
  ['{62083BA9-9977-47BE-BEF9-2B93966264C5}']  

  end;

  IPersistentTip_remontiruemogo_izdeliya = interface(IPersistentSpravochnik)
  ['{87A110F7-6436-4ABB-8274-15C9FC5CC85D}']  
    function Get_opredelyaet_tip_dlya: IBoldObjectIdListRef;
    function Get_opredelyaet_tip_dlya_Type: TMoldClass;

    property opredelyaet_tip_dlya: IBoldObjectIdListRef read Get_opredelyaet_tip_dlya;
    property opredelyaet_tip_dlya_Type: TMoldClass read Get_opredelyaet_tip_dlya_Type;
  end;

  IPersistentTip_tovara = interface(IPersistentSpravochnik)
  ['{6E6C6006-1192-4A13-A6BE-9C42CD1EE0DD}']  
    function Get_imeet_rashod_materiala: IBoldObjectIdListRef;
    function Get_imeet_rashod_materiala_Type: TMoldClass;

    property imeet_rashod_materiala: IBoldObjectIdListRef read Get_imeet_rashod_materiala;
    property imeet_rashod_materiala_Type: TMoldClass read Get_imeet_rashod_materiala_Type;
  end;

  IPersistentPriemka_vydacha = interface(IPersistentTip_operacii)
  ['{E95C7014-A3F5-4F87-BE3D-C6AD170F807B}']  
    function Get_M_YavlBezNal: IBoldIntegerContent;
    function Get_YavlBezNal: integer;
    procedure Set_YavlBezNal(NewValue: integer);

    function Get_M_OtpushenSRemonta: IBoldIntegerContent;
    function Get_OtpushenSRemonta: integer;
    procedure Set_OtpushenSRemonta(NewValue: integer);

    function Get_M_OplachenBezNal: IBoldIntegerContent;
    function Get_OplachenBezNal: integer;
    procedure Set_OplachenBezNal(NewValue: integer);

    function Get_M_DataPriema: IBoldDateContent;
    function Get_DataPriema: TDateTime;
    procedure Set_DataPriema(NewValue: TDateTime);

    function Get_M_DataVydachi: IBoldDateContent;
    function Get_DataVydachi: TDateTime;
    procedure Set_DataVydachi(NewValue: TDateTime);

    function Get_M_KlientYavlYurLicom: IBoldIntegerContent;
    function Get_KlientYavlYurLicom: integer;
    procedure Set_KlientYavlYurLicom(NewValue: integer);

    function Get_Otdeljnaya_usluga_v: IBoldObjectIdListRef;
    function Get_Otdeljnaya_usluga_v_Type: TMoldClass;
    function Get_M_usluga_dlya_fiz_lica: IBoldObjectIdRef;
    function Get_usluga_dlya_fiz_lica: IPersistentChastnoe_lico;
    procedure Set_usluga_dlya_fiz_lica(const NewValue: IPersistentChastnoe_lico);
    function Get_usluga_dlya_fiz_lica_Type: TMoldClass;
    function Get_M_rem_osush_sotrudnik: IBoldObjectIdRef;
    function Get_rem_osush_sotrudnik: IPersistentSotrudnik_remont;
    procedure Set_rem_osush_sotrudnik(const NewValue: IPersistentSotrudnik_remont);
    function Get_rem_osush_sotrudnik_Type: TMoldClass;
    function Get_M_zanim_uslugoi: IBoldObjectIdRef;
    function Get_zanim_uslugoi: IPersistentSotrudnik_menedger;
    procedure Set_zanim_uslugoi(const NewValue: IPersistentSotrudnik_menedger);
    function Get_zanim_uslugoi_Type: TMoldClass;
    function Get_M_usluga_dlya_yur_lica: IBoldObjectIdRef;
    function Get_usluga_dlya_yur_lica: IPersistentYuridich_lico;
    procedure Set_usluga_dlya_yur_lica(const NewValue: IPersistentYuridich_lico);
    function Get_usluga_dlya_yur_lica_Type: TMoldClass;

    property M_YavlBezNal: IBoldIntegerContent read Get_M_YavlBezNal;
    property YavlBezNal: integer read Get_YavlBezNal write Set_YavlBezNal;

    property M_OtpushenSRemonta: IBoldIntegerContent read Get_M_OtpushenSRemonta;
    property OtpushenSRemonta: integer read Get_OtpushenSRemonta write Set_OtpushenSRemonta;

    property M_OplachenBezNal: IBoldIntegerContent read Get_M_OplachenBezNal;
    property OplachenBezNal: integer read Get_OplachenBezNal write Set_OplachenBezNal;

    property M_DataPriema: IBoldDateContent read Get_M_DataPriema;
    property DataPriema: TDateTime read Get_DataPriema write Set_DataPriema;

    property M_DataVydachi: IBoldDateContent read Get_M_DataVydachi;
    property DataVydachi: TDateTime read Get_DataVydachi write Set_DataVydachi;

    property M_KlientYavlYurLicom: IBoldIntegerContent read Get_M_KlientYavlYurLicom;
    property KlientYavlYurLicom: integer read Get_KlientYavlYurLicom write Set_KlientYavlYurLicom;

    property Otdeljnaya_usluga_v: IBoldObjectIdListRef read Get_Otdeljnaya_usluga_v;
    property Otdeljnaya_usluga_v_Type: TMoldClass read Get_Otdeljnaya_usluga_v_Type;
    property M_usluga_dlya_fiz_lica: IBoldObjectIdRef read Get_M_usluga_dlya_fiz_lica;
    property usluga_dlya_fiz_lica: IPersistentChastnoe_lico read Get_usluga_dlya_fiz_lica write Set_usluga_dlya_fiz_lica;
    property usluga_dlya_fiz_lica_Type: TMoldClass read Get_usluga_dlya_fiz_lica_Type;
    property M_rem_osush_sotrudnik: IBoldObjectIdRef read Get_M_rem_osush_sotrudnik;
    property rem_osush_sotrudnik: IPersistentSotrudnik_remont read Get_rem_osush_sotrudnik write Set_rem_osush_sotrudnik;
    property rem_osush_sotrudnik_Type: TMoldClass read Get_rem_osush_sotrudnik_Type;
    property M_zanim_uslugoi: IBoldObjectIdRef read Get_M_zanim_uslugoi;
    property zanim_uslugoi: IPersistentSotrudnik_menedger read Get_zanim_uslugoi write Set_zanim_uslugoi;
    property zanim_uslugoi_Type: TMoldClass read Get_zanim_uslugoi_Type;
    property M_usluga_dlya_yur_lica: IBoldObjectIdRef read Get_M_usluga_dlya_yur_lica;
    property usluga_dlya_yur_lica: IPersistentYuridich_lico read Get_usluga_dlya_yur_lica write Set_usluga_dlya_yur_lica;
    property usluga_dlya_yur_lica_Type: TMoldClass read Get_usluga_dlya_yur_lica_Type;
  end;

  TBusinessClassesRootPersistenceAdapter = class(TBoldObjectPersistenceAdapter, IPersistentBusinessClassesRoot)
  private
  end;

  TPersonaPersistenceAdapter = class(TBusinessClassesRootPersistenceAdapter, IPersistentPersona)
  private
    function Get_M_Familiya: IBoldStringContent;
    function Get_Familiya: String;
    procedure Set_Familiya(NewValue: String);

    function Get_M_Imya: IBoldStringContent;
    function Get_Imya: String;
    procedure Set_Imya(NewValue: String);

    function Get_M_Otchestvo: IBoldStringContent;
    function Get_Otchestvo: String;
    procedure Set_Otchestvo(NewValue: String);

    function Get_M_Ulica: IBoldStringContent;
    function Get_Ulica: String;
    procedure Set_Ulica(NewValue: String);

    function Get_M_Dom: IBoldIntegerContent;
    function Get_Dom: integer;
    procedure Set_Dom(NewValue: integer);

    function Get_M_Kvartira: IBoldIntegerContent;
    function Get_Kvartira: integer;
    procedure Set_Kvartira(NewValue: integer);

    function Get_M_Korpus: IBoldIntegerContent;
    function Get_Korpus: integer;
    procedure Set_Korpus(NewValue: integer);

    function Get_M_Mobiljnyi_telefon: IBoldStringContent;
    function Get_Mobiljnyi_telefon: String;
    procedure Set_Mobiljnyi_telefon(NewValue: String);

    function Get_M_Rabochii_telefon: IBoldStringContent;
    function Get_Rabochii_telefon: String;
    procedure Set_Rabochii_telefon(NewValue: String);

    function Get_M_Domashnii_telefon: IBoldStringContent;
    function Get_Domashnii_telefon: String;
    procedure Set_Domashnii_telefon(NewValue: String);

    function Get_M_Elektronnyi_adres: IBoldStringContent;
    function Get_Elektronnyi_adres: String;
    procedure Set_Elektronnyi_adres(NewValue: String);

  end;

  TRashod_rem_materialovPersistenceAdapter = class(TBusinessClassesRootPersistenceAdapter, IPersistentRashod_rem_materialov)
  private
    function Get_M_Kolichestvo: IBoldIntegerContent;
    function Get_Kolichestvo: integer;
    procedure Set_Kolichestvo(NewValue: integer);

    function Get_M_Stoimostj: IBoldFloatContent;
    function Get_Stoimostj: double;
    procedure Set_Stoimostj(NewValue: double);

    function Get_M_yavlyaetsya_po_tipu: IBoldObjectIdRef;
    function Get_yavlyaetsya_po_tipu: IPersistentTip_tovara;
    procedure Set_yavlyaetsya_po_tipu(const NewValue: IPersistentTip_tovara);
    function Get_yavlyaetsya_po_tipu_Type: TMoldClass;
    function Get_M_Rashoduetsya_dlya_remonta: IBoldObjectIdRef;
    function Get_Rashoduetsya_dlya_remonta: IPersistentSostav_priemki_vydachi;
    procedure Set_Rashoduetsya_dlya_remonta(const NewValue: IPersistentSostav_priemki_vydachi);
    function Get_Rashoduetsya_dlya_remonta_Type: TMoldClass;
  end;

  TSostav_priemki_vydachiPersistenceAdapter = class(TBusinessClassesRootPersistenceAdapter, IPersistentSostav_priemki_vydachi)
  private
    function Get_M_Pozicii_uslug_dlya: IBoldObjectIdRef;
    function Get_Pozicii_uslug_dlya: IPersistentPriemka_vydacha;
    procedure Set_Pozicii_uslug_dlya(const NewValue: IPersistentPriemka_vydacha);
    function Get_Pozicii_uslug_dlya_Type: TMoldClass;
    function Get_Remont_predpolagaet: IBoldObjectIdListRef;
    function Get_Remont_predpolagaet_Type: TMoldClass;
    function Get_M_otnositsya_po_tipu: IBoldObjectIdRef;
    function Get_otnositsya_po_tipu: IPersistentTip_remontiruemogo_izdeliya;
    procedure Set_otnositsya_po_tipu(const NewValue: IPersistentTip_remontiruemogo_izdeliya);
    function Get_otnositsya_po_tipu_Type: TMoldClass;
  end;

  TSpravochnikPersistenceAdapter = class(TBusinessClassesRootPersistenceAdapter, IPersistentSpravochnik)
  private
    function Get_M_Naimenovanie: IBoldStringContent;
    function Get_Naimenovanie: String;
    procedure Set_Naimenovanie(NewValue: String);

    function Get_M_Identifikator: IBoldIntegerContent;
    function Get_Identifikator: integer;
    procedure Set_Identifikator(NewValue: integer);

    function Get_M_Kommentarii: IBoldStringContent;
    function Get_Kommentarii: String;
    procedure Set_Kommentarii(NewValue: String);

  end;

  TSotrudnik_menedgerPersistenceAdapter = class(TPersonaPersistenceAdapter, IPersistentSotrudnik_menedger)
  private
    function Get_menedger_osush: IBoldObjectIdListRef;
    function Get_menedger_osush_Type: TMoldClass;
  end;

  TSotrudnik_remontPersistenceAdapter = class(TPersonaPersistenceAdapter, IPersistentSotrudnik_remont)
  private
    function Get_tehn_sotr_zanimaetsya: IBoldObjectIdListRef;
    function Get_tehn_sotr_zanimaetsya_Type: TMoldClass;
  end;

  TChastnoe_licoPersistenceAdapter = class(TPersonaPersistenceAdapter, IPersistentChastnoe_lico)
  private
    function Get_fiz_klient_dlya_uslugi: IBoldObjectIdListRef;
    function Get_fiz_klient_dlya_uslugi_Type: TMoldClass;
  end;

  TYuridich_licoPersistenceAdapter = class(TPersonaPersistenceAdapter, IPersistentYuridich_lico)
  private
    function Get_M_BIK: IBoldStringContent;
    function Get_BIK: String;
    procedure Set_BIK(NewValue: String);

    function Get_yur_klient_uslugi: IBoldObjectIdListRef;
    function Get_yur_klient_uslugi_Type: TMoldClass;
  end;

  TTip_operaciiPersistenceAdapter = class(TSpravochnikPersistenceAdapter, IPersistentTip_operacii)
  private
  end;

  TTip_remontiruemogo_izdeliyaPersistenceAdapter = class(TSpravochnikPersistenceAdapter, IPersistentTip_remontiruemogo_izdeliya)
  private
    function Get_opredelyaet_tip_dlya: IBoldObjectIdListRef;
    function Get_opredelyaet_tip_dlya_Type: TMoldClass;
  end;

  TTip_tovaraPersistenceAdapter = class(TSpravochnikPersistenceAdapter, IPersistentTip_tovara)
  private
    function Get_imeet_rashod_materiala: IBoldObjectIdListRef;
    function Get_imeet_rashod_materiala_Type: TMoldClass;
  end;

  TPriemka_vydachaPersistenceAdapter = class(TTip_operaciiPersistenceAdapter, IPersistentPriemka_vydacha)
  private
    function Get_M_YavlBezNal: IBoldIntegerContent;
    function Get_YavlBezNal: integer;
    procedure Set_YavlBezNal(NewValue: integer);

    function Get_M_OtpushenSRemonta: IBoldIntegerContent;
    function Get_OtpushenSRemonta: integer;
    procedure Set_OtpushenSRemonta(NewValue: integer);

    function Get_M_OplachenBezNal: IBoldIntegerContent;
    function Get_OplachenBezNal: integer;
    procedure Set_OplachenBezNal(NewValue: integer);

    function Get_M_DataPriema: IBoldDateContent;
    function Get_DataPriema: TDateTime;
    procedure Set_DataPriema(NewValue: TDateTime);

    function Get_M_DataVydachi: IBoldDateContent;
    function Get_DataVydachi: TDateTime;
    procedure Set_DataVydachi(NewValue: TDateTime);

    function Get_M_KlientYavlYurLicom: IBoldIntegerContent;
    function Get_KlientYavlYurLicom: integer;
    procedure Set_KlientYavlYurLicom(NewValue: integer);

    function Get_Otdeljnaya_usluga_v: IBoldObjectIdListRef;
    function Get_Otdeljnaya_usluga_v_Type: TMoldClass;
    function Get_M_usluga_dlya_fiz_lica: IBoldObjectIdRef;
    function Get_usluga_dlya_fiz_lica: IPersistentChastnoe_lico;
    procedure Set_usluga_dlya_fiz_lica(const NewValue: IPersistentChastnoe_lico);
    function Get_usluga_dlya_fiz_lica_Type: TMoldClass;
    function Get_M_rem_osush_sotrudnik: IBoldObjectIdRef;
    function Get_rem_osush_sotrudnik: IPersistentSotrudnik_remont;
    procedure Set_rem_osush_sotrudnik(const NewValue: IPersistentSotrudnik_remont);
    function Get_rem_osush_sotrudnik_Type: TMoldClass;
    function Get_M_zanim_uslugoi: IBoldObjectIdRef;
    function Get_zanim_uslugoi: IPersistentSotrudnik_menedger;
    procedure Set_zanim_uslugoi(const NewValue: IPersistentSotrudnik_menedger);
    function Get_zanim_uslugoi_Type: TMoldClass;
    function Get_M_usluga_dlya_yur_lica: IBoldObjectIdRef;
    function Get_usluga_dlya_yur_lica: IPersistentYuridich_lico;
    procedure Set_usluga_dlya_yur_lica(const NewValue: IPersistentYuridich_lico);
    function Get_usluga_dlya_yur_lica_Type: TMoldClass;
  end;

implementation

uses
  // implementation uses
  // other
  bolddefs;


function TPersonaPersistenceAdapter.Get_M_Familiya: IBoldStringContent;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[0];
  if not value.QueryInterface(IBoldStringContent, result) = S_OK then
    raise EBold.Create('TPersonaPersistenceAdapter.Get_M_Familiya: Invalid interface... does not support IBoldStringContent');
end;

function TPersonaPersistenceAdapter.Get_Familiya: String;
begin
  result := Get_M_Familiya.AsString;
end;

procedure TPersonaPersistenceAdapter.Set_Familiya(NewValue: String);
begin
  Get_M_Familiya.AsString := NewValue;
end;


function TPersonaPersistenceAdapter.Get_M_Imya: IBoldStringContent;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[1];
  if not value.QueryInterface(IBoldStringContent, result) = S_OK then
    raise EBold.Create('TPersonaPersistenceAdapter.Get_M_Imya: Invalid interface... does not support IBoldStringContent');
end;

function TPersonaPersistenceAdapter.Get_Imya: String;
begin
  result := Get_M_Imya.AsString;
end;

procedure TPersonaPersistenceAdapter.Set_Imya(NewValue: String);
begin
  Get_M_Imya.AsString := NewValue;
end;


function TPersonaPersistenceAdapter.Get_M_Otchestvo: IBoldStringContent;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[2];
  if not value.QueryInterface(IBoldStringContent, result) = S_OK then
    raise EBold.Create('TPersonaPersistenceAdapter.Get_M_Otchestvo: Invalid interface... does not support IBoldStringContent');
end;

function TPersonaPersistenceAdapter.Get_Otchestvo: String;
begin
  result := Get_M_Otchestvo.AsString;
end;

procedure TPersonaPersistenceAdapter.Set_Otchestvo(NewValue: String);
begin
  Get_M_Otchestvo.AsString := NewValue;
end;


function TPersonaPersistenceAdapter.Get_M_Ulica: IBoldStringContent;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[3];
  if not value.QueryInterface(IBoldStringContent, result) = S_OK then
    raise EBold.Create('TPersonaPersistenceAdapter.Get_M_Ulica: Invalid interface... does not support IBoldStringContent');
end;

function TPersonaPersistenceAdapter.Get_Ulica: String;
begin
  result := Get_M_Ulica.AsString;
end;

procedure TPersonaPersistenceAdapter.Set_Ulica(NewValue: String);
begin
  Get_M_Ulica.AsString := NewValue;
end;


function TPersonaPersistenceAdapter.Get_M_Dom: IBoldIntegerContent;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[4];
  if not value.QueryInterface(IBoldIntegerContent, result) = S_OK then
    raise EBold.Create('TPersonaPersistenceAdapter.Get_M_Dom: Invalid interface... does not support IBoldIntegerContent');
end;

function TPersonaPersistenceAdapter.Get_Dom: integer;
begin
  result := Get_M_Dom.AsInteger;
end;

procedure TPersonaPersistenceAdapter.Set_Dom(NewValue: integer);
begin
  Get_M_Dom.AsInteger := NewValue;
end;


function TPersonaPersistenceAdapter.Get_M_Kvartira: IBoldIntegerContent;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[5];
  if not value.QueryInterface(IBoldIntegerContent, result) = S_OK then
    raise EBold.Create('TPersonaPersistenceAdapter.Get_M_Kvartira: Invalid interface... does not support IBoldIntegerContent');
end;

function TPersonaPersistenceAdapter.Get_Kvartira: integer;
begin
  result := Get_M_Kvartira.AsInteger;
end;

procedure TPersonaPersistenceAdapter.Set_Kvartira(NewValue: integer);
begin
  Get_M_Kvartira.AsInteger := NewValue;
end;


function TPersonaPersistenceAdapter.Get_M_Korpus: IBoldIntegerContent;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[6];
  if not value.QueryInterface(IBoldIntegerContent, result) = S_OK then
    raise EBold.Create('TPersonaPersistenceAdapter.Get_M_Korpus: Invalid interface... does not support IBoldIntegerContent');
end;

function TPersonaPersistenceAdapter.Get_Korpus: integer;
begin
  result := Get_M_Korpus.AsInteger;
end;

procedure TPersonaPersistenceAdapter.Set_Korpus(NewValue: integer);
begin
  Get_M_Korpus.AsInteger := NewValue;
end;


function TPersonaPersistenceAdapter.Get_M_Mobiljnyi_telefon: IBoldStringContent;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[7];
  if not value.QueryInterface(IBoldStringContent, result) = S_OK then
    raise EBold.Create('TPersonaPersistenceAdapter.Get_M_Mobiljnyi_telefon: Invalid interface... does not support IBoldStringContent');
end;

function TPersonaPersistenceAdapter.Get_Mobiljnyi_telefon: String;
begin
  result := Get_M_Mobiljnyi_telefon.AsString;
end;

procedure TPersonaPersistenceAdapter.Set_Mobiljnyi_telefon(NewValue: String);
begin
  Get_M_Mobiljnyi_telefon.AsString := NewValue;
end;


function TPersonaPersistenceAdapter.Get_M_Rabochii_telefon: IBoldStringContent;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[8];
  if not value.QueryInterface(IBoldStringContent, result) = S_OK then
    raise EBold.Create('TPersonaPersistenceAdapter.Get_M_Rabochii_telefon: Invalid interface... does not support IBoldStringContent');
end;

function TPersonaPersistenceAdapter.Get_Rabochii_telefon: String;
begin
  result := Get_M_Rabochii_telefon.AsString;
end;

procedure TPersonaPersistenceAdapter.Set_Rabochii_telefon(NewValue: String);
begin
  Get_M_Rabochii_telefon.AsString := NewValue;
end;


function TPersonaPersistenceAdapter.Get_M_Domashnii_telefon: IBoldStringContent;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[9];
  if not value.QueryInterface(IBoldStringContent, result) = S_OK then
    raise EBold.Create('TPersonaPersistenceAdapter.Get_M_Domashnii_telefon: Invalid interface... does not support IBoldStringContent');
end;

function TPersonaPersistenceAdapter.Get_Domashnii_telefon: String;
begin
  result := Get_M_Domashnii_telefon.AsString;
end;

procedure TPersonaPersistenceAdapter.Set_Domashnii_telefon(NewValue: String);
begin
  Get_M_Domashnii_telefon.AsString := NewValue;
end;


function TPersonaPersistenceAdapter.Get_M_Elektronnyi_adres: IBoldStringContent;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[10];
  if not value.QueryInterface(IBoldStringContent, result) = S_OK then
    raise EBold.Create('TPersonaPersistenceAdapter.Get_M_Elektronnyi_adres: Invalid interface... does not support IBoldStringContent');
end;

function TPersonaPersistenceAdapter.Get_Elektronnyi_adres: String;
begin
  result := Get_M_Elektronnyi_adres.AsString;
end;

procedure TPersonaPersistenceAdapter.Set_Elektronnyi_adres(NewValue: String);
begin
  Get_M_Elektronnyi_adres.AsString := NewValue;
end;



function TRashod_rem_materialovPersistenceAdapter.Get_M_Kolichestvo: IBoldIntegerContent;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[0];
  if not value.QueryInterface(IBoldIntegerContent, result) = S_OK then
    raise EBold.Create('TRashod_rem_materialovPersistenceAdapter.Get_M_Kolichestvo: Invalid interface... does not support IBoldIntegerContent');
end;

function TRashod_rem_materialovPersistenceAdapter.Get_Kolichestvo: integer;
begin
  result := Get_M_Kolichestvo.AsInteger;
end;

procedure TRashod_rem_materialovPersistenceAdapter.Set_Kolichestvo(NewValue: integer);
begin
  Get_M_Kolichestvo.AsInteger := NewValue;
end;


function TRashod_rem_materialovPersistenceAdapter.Get_M_Stoimostj: IBoldFloatContent;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[1];
  if not value.QueryInterface(IBoldFloatContent, result) = S_OK then
    raise EBold.Create('TRashod_rem_materialovPersistenceAdapter.Get_M_Stoimostj: Invalid interface... does not support IBoldFloatContent');
end;

function TRashod_rem_materialovPersistenceAdapter.Get_Stoimostj: double;
begin
  result := Get_M_Stoimostj.AsFloat;
end;

procedure TRashod_rem_materialovPersistenceAdapter.Set_Stoimostj(NewValue: double);
begin
  Get_M_Stoimostj.AsFloat := NewValue;
end;



function TRashod_rem_materialovPersistenceAdapter.Get_M_yavlyaetsya_po_tipu: IBoldObjectIdRef;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[3];
  if not value.QueryInterface(IBoldObjectIdRef, result) = S_OK then
    raise EBold.Create('TRashod_rem_materialovPersistenceAdapter.Get_M_yavlyaetsya_po_tipu: Invalid interface... does not support IBoldObjectIdRef');
end;

function TRashod_rem_materialovPersistenceAdapter.Get_yavlyaetsya_po_tipu: IPersistentTip_tovara;
var
  id: TBoldObjectId;
  ObjectContents: IBoldObjectContents;
begin
  result := nil;
  Id := Get_M_yavlyaetsya_po_tipu.Id;
  if assigned(Id) then
  begin
    ObjectContents := ValueSpace.ObjectContentsByObjectId[Id];
    if assigned(ObjectContents) then
      result := TTip_tovaraPersistenceAdapter.Create(ObjectContents, ValueSpace, Get_yavlyaetsya_po_tipu_Type);
  end;
end;

procedure TRashod_rem_materialovPersistenceAdapter.Set_yavlyaetsya_po_tipu(const NewValue: IPersistentTip_tovara);
begin
  if assigned(NewValue) then
    Get_M_yavlyaetsya_po_tipu.SetFromId(NewValue.AsObjectContents.ObjectId)
  else
    Get_M_yavlyaetsya_po_tipu.SetFromId(nil);
end;

function TRashod_rem_materialovPersistenceAdapter.Get_yavlyaetsya_po_tipu_Type: TMoldClass;
begin
  result := (MoldClass.AllBoldMembers[3] as TMoldRole).OtherEnd.MoldClass;
end;

function TRashod_rem_materialovPersistenceAdapter.Get_M_Rashoduetsya_dlya_remonta: IBoldObjectIdRef;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[4];
  if not value.QueryInterface(IBoldObjectIdRef, result) = S_OK then
    raise EBold.Create('TRashod_rem_materialovPersistenceAdapter.Get_M_Rashoduetsya_dlya_remonta: Invalid interface... does not support IBoldObjectIdRef');
end;

function TRashod_rem_materialovPersistenceAdapter.Get_Rashoduetsya_dlya_remonta: IPersistentSostav_priemki_vydachi;
var
  id: TBoldObjectId;
  ObjectContents: IBoldObjectContents;
begin
  result := nil;
  Id := Get_M_Rashoduetsya_dlya_remonta.Id;
  if assigned(Id) then
  begin
    ObjectContents := ValueSpace.ObjectContentsByObjectId[Id];
    if assigned(ObjectContents) then
      result := TSostav_priemki_vydachiPersistenceAdapter.Create(ObjectContents, ValueSpace, Get_Rashoduetsya_dlya_remonta_Type);
  end;
end;

procedure TRashod_rem_materialovPersistenceAdapter.Set_Rashoduetsya_dlya_remonta(const NewValue: IPersistentSostav_priemki_vydachi);
begin
  if assigned(NewValue) then
    Get_M_Rashoduetsya_dlya_remonta.SetFromId(NewValue.AsObjectContents.ObjectId)
  else
    Get_M_Rashoduetsya_dlya_remonta.SetFromId(nil);
end;

function TRashod_rem_materialovPersistenceAdapter.Get_Rashoduetsya_dlya_remonta_Type: TMoldClass;
begin
  result := (MoldClass.AllBoldMembers[4] as TMoldRole).OtherEnd.MoldClass;
end;


function TSostav_priemki_vydachiPersistenceAdapter.Get_M_Pozicii_uslug_dlya: IBoldObjectIdRef;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[0];
  if not value.QueryInterface(IBoldObjectIdRef, result) = S_OK then
    raise EBold.Create('TSostav_priemki_vydachiPersistenceAdapter.Get_M_Pozicii_uslug_dlya: Invalid interface... does not support IBoldObjectIdRef');
end;

function TSostav_priemki_vydachiPersistenceAdapter.Get_Pozicii_uslug_dlya: IPersistentPriemka_vydacha;
var
  id: TBoldObjectId;
  ObjectContents: IBoldObjectContents;
begin
  result := nil;
  Id := Get_M_Pozicii_uslug_dlya.Id;
  if assigned(Id) then
  begin
    ObjectContents := ValueSpace.ObjectContentsByObjectId[Id];
    if assigned(ObjectContents) then
      result := TPriemka_vydachaPersistenceAdapter.Create(ObjectContents, ValueSpace, Get_Pozicii_uslug_dlya_Type);
  end;
end;

procedure TSostav_priemki_vydachiPersistenceAdapter.Set_Pozicii_uslug_dlya(const NewValue: IPersistentPriemka_vydacha);
begin
  if assigned(NewValue) then
    Get_M_Pozicii_uslug_dlya.SetFromId(NewValue.AsObjectContents.ObjectId)
  else
    Get_M_Pozicii_uslug_dlya.SetFromId(nil);
end;

function TSostav_priemki_vydachiPersistenceAdapter.Get_Pozicii_uslug_dlya_Type: TMoldClass;
begin
  result := (MoldClass.AllBoldMembers[0] as TMoldRole).OtherEnd.MoldClass;
end;

function TSostav_priemki_vydachiPersistenceAdapter.Get_Remont_predpolagaet: IBoldObjectIdListRef;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[1];
  if not value.QueryInterface(IBoldObjectIdListRef, result) = S_OK then
    raise EBold.Create('TSostav_priemki_vydachiPersistenceAdapter.Get_M_Remont_predpolagaet: Invalid interface... does not support IBoldObjectIdListRef');
end;

function TSostav_priemki_vydachiPersistenceAdapter.Get_Remont_predpolagaet_Type: TMoldClass;
begin
  result := (MoldClass.AllBoldMembers[1] as TMoldRole).OtherEnd.MoldClass;
end;
function TSostav_priemki_vydachiPersistenceAdapter.Get_M_otnositsya_po_tipu: IBoldObjectIdRef;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[2];
  if not value.QueryInterface(IBoldObjectIdRef, result) = S_OK then
    raise EBold.Create('TSostav_priemki_vydachiPersistenceAdapter.Get_M_otnositsya_po_tipu: Invalid interface... does not support IBoldObjectIdRef');
end;

function TSostav_priemki_vydachiPersistenceAdapter.Get_otnositsya_po_tipu: IPersistentTip_remontiruemogo_izdeliya;
var
  id: TBoldObjectId;
  ObjectContents: IBoldObjectContents;
begin
  result := nil;
  Id := Get_M_otnositsya_po_tipu.Id;
  if assigned(Id) then
  begin
    ObjectContents := ValueSpace.ObjectContentsByObjectId[Id];
    if assigned(ObjectContents) then
      result := TTip_remontiruemogo_izdeliyaPersistenceAdapter.Create(ObjectContents, ValueSpace, Get_otnositsya_po_tipu_Type);
  end;
end;

procedure TSostav_priemki_vydachiPersistenceAdapter.Set_otnositsya_po_tipu(const NewValue: IPersistentTip_remontiruemogo_izdeliya);
begin
  if assigned(NewValue) then
    Get_M_otnositsya_po_tipu.SetFromId(NewValue.AsObjectContents.ObjectId)
  else
    Get_M_otnositsya_po_tipu.SetFromId(nil);
end;

function TSostav_priemki_vydachiPersistenceAdapter.Get_otnositsya_po_tipu_Type: TMoldClass;
begin
  result := (MoldClass.AllBoldMembers[2] as TMoldRole).OtherEnd.MoldClass;
end;


function TSpravochnikPersistenceAdapter.Get_M_Naimenovanie: IBoldStringContent;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[0];
  if not value.QueryInterface(IBoldStringContent, result) = S_OK then
    raise EBold.Create('TSpravochnikPersistenceAdapter.Get_M_Naimenovanie: Invalid interface... does not support IBoldStringContent');
end;

function TSpravochnikPersistenceAdapter.Get_Naimenovanie: String;
begin
  result := Get_M_Naimenovanie.AsString;
end;

procedure TSpravochnikPersistenceAdapter.Set_Naimenovanie(NewValue: String);
begin
  Get_M_Naimenovanie.AsString := NewValue;
end;


function TSpravochnikPersistenceAdapter.Get_M_Identifikator: IBoldIntegerContent;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[1];
  if not value.QueryInterface(IBoldIntegerContent, result) = S_OK then
    raise EBold.Create('TSpravochnikPersistenceAdapter.Get_M_Identifikator: Invalid interface... does not support IBoldIntegerContent');
end;

function TSpravochnikPersistenceAdapter.Get_Identifikator: integer;
begin
  result := Get_M_Identifikator.AsInteger;
end;

procedure TSpravochnikPersistenceAdapter.Set_Identifikator(NewValue: integer);
begin
  Get_M_Identifikator.AsInteger := NewValue;
end;


function TSpravochnikPersistenceAdapter.Get_M_Kommentarii: IBoldStringContent;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[2];
  if not value.QueryInterface(IBoldStringContent, result) = S_OK then
    raise EBold.Create('TSpravochnikPersistenceAdapter.Get_M_Kommentarii: Invalid interface... does not support IBoldStringContent');
end;

function TSpravochnikPersistenceAdapter.Get_Kommentarii: String;
begin
  result := Get_M_Kommentarii.AsString;
end;

procedure TSpravochnikPersistenceAdapter.Set_Kommentarii(NewValue: String);
begin
  Get_M_Kommentarii.AsString := NewValue;
end;



function TSotrudnik_menedgerPersistenceAdapter.Get_menedger_osush: IBoldObjectIdListRef;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[11];
  if not value.QueryInterface(IBoldObjectIdListRef, result) = S_OK then
    raise EBold.Create('TSotrudnik_menedgerPersistenceAdapter.Get_M_menedger_osush: Invalid interface... does not support IBoldObjectIdListRef');
end;

function TSotrudnik_menedgerPersistenceAdapter.Get_menedger_osush_Type: TMoldClass;
begin
  result := (MoldClass.AllBoldMembers[11] as TMoldRole).OtherEnd.MoldClass;
end;

function TSotrudnik_remontPersistenceAdapter.Get_tehn_sotr_zanimaetsya: IBoldObjectIdListRef;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[11];
  if not value.QueryInterface(IBoldObjectIdListRef, result) = S_OK then
    raise EBold.Create('TSotrudnik_remontPersistenceAdapter.Get_M_tehn_sotr_zanimaetsya: Invalid interface... does not support IBoldObjectIdListRef');
end;

function TSotrudnik_remontPersistenceAdapter.Get_tehn_sotr_zanimaetsya_Type: TMoldClass;
begin
  result := (MoldClass.AllBoldMembers[11] as TMoldRole).OtherEnd.MoldClass;
end;

function TChastnoe_licoPersistenceAdapter.Get_fiz_klient_dlya_uslugi: IBoldObjectIdListRef;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[11];
  if not value.QueryInterface(IBoldObjectIdListRef, result) = S_OK then
    raise EBold.Create('TChastnoe_licoPersistenceAdapter.Get_M_fiz_klient_dlya_uslugi: Invalid interface... does not support IBoldObjectIdListRef');
end;

function TChastnoe_licoPersistenceAdapter.Get_fiz_klient_dlya_uslugi_Type: TMoldClass;
begin
  result := (MoldClass.AllBoldMembers[11] as TMoldRole).OtherEnd.MoldClass;
end;

function TYuridich_licoPersistenceAdapter.Get_M_BIK: IBoldStringContent;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[11];
  if not value.QueryInterface(IBoldStringContent, result) = S_OK then
    raise EBold.Create('TYuridich_licoPersistenceAdapter.Get_M_BIK: Invalid interface... does not support IBoldStringContent');
end;

function TYuridich_licoPersistenceAdapter.Get_BIK: String;
begin
  result := Get_M_BIK.AsString;
end;

procedure TYuridich_licoPersistenceAdapter.Set_BIK(NewValue: String);
begin
  Get_M_BIK.AsString := NewValue;
end;


function TYuridich_licoPersistenceAdapter.Get_yur_klient_uslugi: IBoldObjectIdListRef;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[12];
  if not value.QueryInterface(IBoldObjectIdListRef, result) = S_OK then
    raise EBold.Create('TYuridich_licoPersistenceAdapter.Get_M_yur_klient_uslugi: Invalid interface... does not support IBoldObjectIdListRef');
end;

function TYuridich_licoPersistenceAdapter.Get_yur_klient_uslugi_Type: TMoldClass;
begin
  result := (MoldClass.AllBoldMembers[12] as TMoldRole).OtherEnd.MoldClass;
end;


function TTip_remontiruemogo_izdeliyaPersistenceAdapter.Get_opredelyaet_tip_dlya: IBoldObjectIdListRef;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[3];
  if not value.QueryInterface(IBoldObjectIdListRef, result) = S_OK then
    raise EBold.Create('TTip_remontiruemogo_izdeliyaPersistenceAdapter.Get_M_opredelyaet_tip_dlya: Invalid interface... does not support IBoldObjectIdListRef');
end;

function TTip_remontiruemogo_izdeliyaPersistenceAdapter.Get_opredelyaet_tip_dlya_Type: TMoldClass;
begin
  result := (MoldClass.AllBoldMembers[3] as TMoldRole).OtherEnd.MoldClass;
end;

function TTip_tovaraPersistenceAdapter.Get_imeet_rashod_materiala: IBoldObjectIdListRef;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[3];
  if not value.QueryInterface(IBoldObjectIdListRef, result) = S_OK then
    raise EBold.Create('TTip_tovaraPersistenceAdapter.Get_M_imeet_rashod_materiala: Invalid interface... does not support IBoldObjectIdListRef');
end;

function TTip_tovaraPersistenceAdapter.Get_imeet_rashod_materiala_Type: TMoldClass;
begin
  result := (MoldClass.AllBoldMembers[3] as TMoldRole).OtherEnd.MoldClass;
end;

function TPriemka_vydachaPersistenceAdapter.Get_M_YavlBezNal: IBoldIntegerContent;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[3];
  if not value.QueryInterface(IBoldIntegerContent, result) = S_OK then
    raise EBold.Create('TPriemka_vydachaPersistenceAdapter.Get_M_YavlBezNal: Invalid interface... does not support IBoldIntegerContent');
end;

function TPriemka_vydachaPersistenceAdapter.Get_YavlBezNal: integer;
begin
  result := Get_M_YavlBezNal.AsInteger;
end;

procedure TPriemka_vydachaPersistenceAdapter.Set_YavlBezNal(NewValue: integer);
begin
  Get_M_YavlBezNal.AsInteger := NewValue;
end;


function TPriemka_vydachaPersistenceAdapter.Get_M_OtpushenSRemonta: IBoldIntegerContent;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[4];
  if not value.QueryInterface(IBoldIntegerContent, result) = S_OK then
    raise EBold.Create('TPriemka_vydachaPersistenceAdapter.Get_M_OtpushenSRemonta: Invalid interface... does not support IBoldIntegerContent');
end;

function TPriemka_vydachaPersistenceAdapter.Get_OtpushenSRemonta: integer;
begin
  result := Get_M_OtpushenSRemonta.AsInteger;
end;

procedure TPriemka_vydachaPersistenceAdapter.Set_OtpushenSRemonta(NewValue: integer);
begin
  Get_M_OtpushenSRemonta.AsInteger := NewValue;
end;


function TPriemka_vydachaPersistenceAdapter.Get_M_OplachenBezNal: IBoldIntegerContent;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[5];
  if not value.QueryInterface(IBoldIntegerContent, result) = S_OK then
    raise EBold.Create('TPriemka_vydachaPersistenceAdapter.Get_M_OplachenBezNal: Invalid interface... does not support IBoldIntegerContent');
end;

function TPriemka_vydachaPersistenceAdapter.Get_OplachenBezNal: integer;
begin
  result := Get_M_OplachenBezNal.AsInteger;
end;

procedure TPriemka_vydachaPersistenceAdapter.Set_OplachenBezNal(NewValue: integer);
begin
  Get_M_OplachenBezNal.AsInteger := NewValue;
end;


function TPriemka_vydachaPersistenceAdapter.Get_M_DataPriema: IBoldDateContent;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[6];
  if not value.QueryInterface(IBoldDateContent, result) = S_OK then
    raise EBold.Create('TPriemka_vydachaPersistenceAdapter.Get_M_DataPriema: Invalid interface... does not support IBoldDateContent');
end;

function TPriemka_vydachaPersistenceAdapter.Get_DataPriema: TDateTime;
begin
  result := Get_M_DataPriema.AsDate;
end;

procedure TPriemka_vydachaPersistenceAdapter.Set_DataPriema(NewValue: TDateTime);
begin
  Get_M_DataPriema.AsDate := NewValue;
end;


function TPriemka_vydachaPersistenceAdapter.Get_M_DataVydachi: IBoldDateContent;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[7];
  if not value.QueryInterface(IBoldDateContent, result) = S_OK then
    raise EBold.Create('TPriemka_vydachaPersistenceAdapter.Get_M_DataVydachi: Invalid interface... does not support IBoldDateContent');
end;

function TPriemka_vydachaPersistenceAdapter.Get_DataVydachi: TDateTime;
begin
  result := Get_M_DataVydachi.AsDate;
end;

procedure TPriemka_vydachaPersistenceAdapter.Set_DataVydachi(NewValue: TDateTime);
begin
  Get_M_DataVydachi.AsDate := NewValue;
end;



function TPriemka_vydachaPersistenceAdapter.Get_M_KlientYavlYurLicom: IBoldIntegerContent;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[9];
  if not value.QueryInterface(IBoldIntegerContent, result) = S_OK then
    raise EBold.Create('TPriemka_vydachaPersistenceAdapter.Get_M_KlientYavlYurLicom: Invalid interface... does not support IBoldIntegerContent');
end;

function TPriemka_vydachaPersistenceAdapter.Get_KlientYavlYurLicom: integer;
begin
  result := Get_M_KlientYavlYurLicom.AsInteger;
end;

procedure TPriemka_vydachaPersistenceAdapter.Set_KlientYavlYurLicom(NewValue: integer);
begin
  Get_M_KlientYavlYurLicom.AsInteger := NewValue;
end;


function TPriemka_vydachaPersistenceAdapter.Get_Otdeljnaya_usluga_v: IBoldObjectIdListRef;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[10];
  if not value.QueryInterface(IBoldObjectIdListRef, result) = S_OK then
    raise EBold.Create('TPriemka_vydachaPersistenceAdapter.Get_M_Otdeljnaya_usluga_v: Invalid interface... does not support IBoldObjectIdListRef');
end;

function TPriemka_vydachaPersistenceAdapter.Get_Otdeljnaya_usluga_v_Type: TMoldClass;
begin
  result := (MoldClass.AllBoldMembers[10] as TMoldRole).OtherEnd.MoldClass;
end;
function TPriemka_vydachaPersistenceAdapter.Get_M_usluga_dlya_fiz_lica: IBoldObjectIdRef;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[11];
  if not value.QueryInterface(IBoldObjectIdRef, result) = S_OK then
    raise EBold.Create('TPriemka_vydachaPersistenceAdapter.Get_M_usluga_dlya_fiz_lica: Invalid interface... does not support IBoldObjectIdRef');
end;

function TPriemka_vydachaPersistenceAdapter.Get_usluga_dlya_fiz_lica: IPersistentChastnoe_lico;
var
  id: TBoldObjectId;
  ObjectContents: IBoldObjectContents;
begin
  result := nil;
  Id := Get_M_usluga_dlya_fiz_lica.Id;
  if assigned(Id) then
  begin
    ObjectContents := ValueSpace.ObjectContentsByObjectId[Id];
    if assigned(ObjectContents) then
      result := TChastnoe_licoPersistenceAdapter.Create(ObjectContents, ValueSpace, Get_usluga_dlya_fiz_lica_Type);
  end;
end;

procedure TPriemka_vydachaPersistenceAdapter.Set_usluga_dlya_fiz_lica(const NewValue: IPersistentChastnoe_lico);
begin
  if assigned(NewValue) then
    Get_M_usluga_dlya_fiz_lica.SetFromId(NewValue.AsObjectContents.ObjectId)
  else
    Get_M_usluga_dlya_fiz_lica.SetFromId(nil);
end;

function TPriemka_vydachaPersistenceAdapter.Get_usluga_dlya_fiz_lica_Type: TMoldClass;
begin
  result := (MoldClass.AllBoldMembers[11] as TMoldRole).OtherEnd.MoldClass;
end;

function TPriemka_vydachaPersistenceAdapter.Get_M_rem_osush_sotrudnik: IBoldObjectIdRef;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[12];
  if not value.QueryInterface(IBoldObjectIdRef, result) = S_OK then
    raise EBold.Create('TPriemka_vydachaPersistenceAdapter.Get_M_rem_osush_sotrudnik: Invalid interface... does not support IBoldObjectIdRef');
end;

function TPriemka_vydachaPersistenceAdapter.Get_rem_osush_sotrudnik: IPersistentSotrudnik_remont;
var
  id: TBoldObjectId;
  ObjectContents: IBoldObjectContents;
begin
  result := nil;
  Id := Get_M_rem_osush_sotrudnik.Id;
  if assigned(Id) then
  begin
    ObjectContents := ValueSpace.ObjectContentsByObjectId[Id];
    if assigned(ObjectContents) then
      result := TSotrudnik_remontPersistenceAdapter.Create(ObjectContents, ValueSpace, Get_rem_osush_sotrudnik_Type);
  end;
end;

procedure TPriemka_vydachaPersistenceAdapter.Set_rem_osush_sotrudnik(const NewValue: IPersistentSotrudnik_remont);
begin
  if assigned(NewValue) then
    Get_M_rem_osush_sotrudnik.SetFromId(NewValue.AsObjectContents.ObjectId)
  else
    Get_M_rem_osush_sotrudnik.SetFromId(nil);
end;

function TPriemka_vydachaPersistenceAdapter.Get_rem_osush_sotrudnik_Type: TMoldClass;
begin
  result := (MoldClass.AllBoldMembers[12] as TMoldRole).OtherEnd.MoldClass;
end;

function TPriemka_vydachaPersistenceAdapter.Get_M_zanim_uslugoi: IBoldObjectIdRef;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[13];
  if not value.QueryInterface(IBoldObjectIdRef, result) = S_OK then
    raise EBold.Create('TPriemka_vydachaPersistenceAdapter.Get_M_zanim_uslugoi: Invalid interface... does not support IBoldObjectIdRef');
end;

function TPriemka_vydachaPersistenceAdapter.Get_zanim_uslugoi: IPersistentSotrudnik_menedger;
var
  id: TBoldObjectId;
  ObjectContents: IBoldObjectContents;
begin
  result := nil;
  Id := Get_M_zanim_uslugoi.Id;
  if assigned(Id) then
  begin
    ObjectContents := ValueSpace.ObjectContentsByObjectId[Id];
    if assigned(ObjectContents) then
      result := TSotrudnik_menedgerPersistenceAdapter.Create(ObjectContents, ValueSpace, Get_zanim_uslugoi_Type);
  end;
end;

procedure TPriemka_vydachaPersistenceAdapter.Set_zanim_uslugoi(const NewValue: IPersistentSotrudnik_menedger);
begin
  if assigned(NewValue) then
    Get_M_zanim_uslugoi.SetFromId(NewValue.AsObjectContents.ObjectId)
  else
    Get_M_zanim_uslugoi.SetFromId(nil);
end;

function TPriemka_vydachaPersistenceAdapter.Get_zanim_uslugoi_Type: TMoldClass;
begin
  result := (MoldClass.AllBoldMembers[13] as TMoldRole).OtherEnd.MoldClass;
end;

function TPriemka_vydachaPersistenceAdapter.Get_M_usluga_dlya_yur_lica: IBoldObjectIdRef;
var
  value: IBoldValue;
begin
  Value := AdaptedInterface.ValueByIndex[14];
  if not value.QueryInterface(IBoldObjectIdRef, result) = S_OK then
    raise EBold.Create('TPriemka_vydachaPersistenceAdapter.Get_M_usluga_dlya_yur_lica: Invalid interface... does not support IBoldObjectIdRef');
end;

function TPriemka_vydachaPersistenceAdapter.Get_usluga_dlya_yur_lica: IPersistentYuridich_lico;
var
  id: TBoldObjectId;
  ObjectContents: IBoldObjectContents;
begin
  result := nil;
  Id := Get_M_usluga_dlya_yur_lica.Id;
  if assigned(Id) then
  begin
    ObjectContents := ValueSpace.ObjectContentsByObjectId[Id];
    if assigned(ObjectContents) then
      result := TYuridich_licoPersistenceAdapter.Create(ObjectContents, ValueSpace, Get_usluga_dlya_yur_lica_Type);
  end;
end;

procedure TPriemka_vydachaPersistenceAdapter.Set_usluga_dlya_yur_lica(const NewValue: IPersistentYuridich_lico);
begin
  if assigned(NewValue) then
    Get_M_usluga_dlya_yur_lica.SetFromId(NewValue.AsObjectContents.ObjectId)
  else
    Get_M_usluga_dlya_yur_lica.SetFromId(nil);
end;

function TPriemka_vydachaPersistenceAdapter.Get_usluga_dlya_yur_lica_Type: TMoldClass;
begin
  result := (MoldClass.AllBoldMembers[14] as TMoldRole).OtherEnd.MoldClass;
end;



initialization
  TBoldObjectPersistenceAdapter.RegisterPersistenceInterface(TBusinessClassesRootPersistenceAdapter, 'BusinessClassesRoot');
  TBoldObjectPersistenceAdapter.RegisterPersistenceInterface(TPersonaPersistenceAdapter, 'Persona');
  TBoldObjectPersistenceAdapter.RegisterPersistenceInterface(TRashod_rem_materialovPersistenceAdapter, 'Rashod_rem_materialov');
  TBoldObjectPersistenceAdapter.RegisterPersistenceInterface(TSostav_priemki_vydachiPersistenceAdapter, 'Sostav_priemki_vydachi');
  TBoldObjectPersistenceAdapter.RegisterPersistenceInterface(TSpravochnikPersistenceAdapter, 'Spravochnik');
  TBoldObjectPersistenceAdapter.RegisterPersistenceInterface(TSotrudnik_menedgerPersistenceAdapter, 'Sotrudnik_menedger');
  TBoldObjectPersistenceAdapter.RegisterPersistenceInterface(TSotrudnik_remontPersistenceAdapter, 'Sotrudnik_remont');
  TBoldObjectPersistenceAdapter.RegisterPersistenceInterface(TChastnoe_licoPersistenceAdapter, 'Chastnoe_lico');
  TBoldObjectPersistenceAdapter.RegisterPersistenceInterface(TYuridich_licoPersistenceAdapter, 'Yuridich_lico');
  TBoldObjectPersistenceAdapter.RegisterPersistenceInterface(TTip_operaciiPersistenceAdapter, 'Tip_operacii');
  TBoldObjectPersistenceAdapter.RegisterPersistenceInterface(TTip_remontiruemogo_izdeliyaPersistenceAdapter, 'Tip_remontiruemogo_izdeliya');
  TBoldObjectPersistenceAdapter.RegisterPersistenceInterface(TTip_tovaraPersistenceAdapter, 'Tip_tovara');
  TBoldObjectPersistenceAdapter.RegisterPersistenceInterface(TPriemka_vydachaPersistenceAdapter, 'Priemka_vydacha');
end.
